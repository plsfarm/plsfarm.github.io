{"version":3,"file":"static/js/394.43efb39c.chunk.js","mappings":"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","sources":["../../node_modules/framer-motion/dist/es/utils/distance.mjs","../../node_modules/framer-motion/dist/es/gestures/pan/PanSession.mjs","../../node_modules/framer-motion/dist/es/projection/geometry/delta-calc.mjs","../../node_modules/framer-motion/dist/es/gestures/drag/utils/constraints.mjs","../../node_modules/framer-motion/dist/es/projection/utils/each-axis.mjs","../../node_modules/framer-motion/dist/es/gestures/drag/VisualElementDragControls.mjs","../../node_modules/framer-motion/dist/es/gestures/drag/index.mjs","../../node_modules/framer-motion/dist/es/gestures/pan/index.mjs","../../node_modules/framer-motion/dist/es/projection/node/state.mjs","../../node_modules/framer-motion/dist/es/projection/styles/scale-border-radius.mjs","../../node_modules/framer-motion/dist/es/projection/styles/scale-box-shadow.mjs","../../node_modules/framer-motion/dist/es/motion/features/layout/MeasureLayout.mjs","../../node_modules/framer-motion/dist/es/components/AnimatePresence/use-presence.mjs","../../node_modules/framer-motion/dist/es/projection/animation/mix-values.mjs","../../node_modules/framer-motion/dist/es/projection/geometry/copy.mjs","../../node_modules/framer-motion/dist/es/projection/geometry/delta-remove.mjs","../../node_modules/framer-motion/dist/es/projection/geometry/utils.mjs","../../node_modules/framer-motion/dist/es/projection/shared/stack.mjs","../../node_modules/framer-motion/dist/es/projection/styles/transform.mjs","../../node_modules/framer-motion/dist/es/render/utils/compare-by-depth.mjs","../../node_modules/framer-motion/dist/es/render/utils/flat-tree.mjs","../../node_modules/framer-motion/dist/es/projection/node/create-projection-node.mjs","../../node_modules/framer-motion/dist/es/debug/record.mjs","../../node_modules/framer-motion/dist/es/render/dom/utils/is-svg-element.mjs","../../node_modules/framer-motion/dist/es/utils/delay.mjs","../../node_modules/framer-motion/dist/es/animation/interfaces/single-value.mjs","../../node_modules/framer-motion/dist/es/projection/node/DocumentProjectionNode.mjs","../../node_modules/framer-motion/dist/es/projection/node/HTMLProjectionNode.mjs","../../node_modules/framer-motion/dist/es/motion/features/drag.mjs","../../node_modules/framer-motion/dist/es/motion/features/layout.mjs","../../node_modules/framer-motion/dist/es/render/dom/features-max.mjs"],"sourcesContent":["const distance = (a, b) => Math.abs(a - b);\nfunction distance2D(a, b) {\n    // Multi-dimensional\n    const xDelta = distance(a.x, b.x);\n    const yDelta = distance(a.y, b.y);\n    return Math.sqrt(xDelta ** 2 + yDelta ** 2);\n}\n\nexport { distance, distance2D };\n","import { extractEventInfo } from '../../events/event-info.mjs';\nimport { secondsToMilliseconds, millisecondsToSeconds } from '../../utils/time-conversion.mjs';\nimport { addPointerEvent } from '../../events/add-pointer-event.mjs';\nimport { pipe } from '../../utils/pipe.mjs';\nimport { distance2D } from '../../utils/distance.mjs';\nimport { isPrimaryPointer } from '../../events/utils/is-primary-pointer.mjs';\nimport { frame, cancelFrame, frameData } from '../../frameloop/frame.mjs';\n\n/**\n * @internal\n */\nclass PanSession {\n    constructor(event, handlers, { transformPagePoint } = {}) {\n        /**\n         * @internal\n         */\n        this.startEvent = null;\n        /**\n         * @internal\n         */\n        this.lastMoveEvent = null;\n        /**\n         * @internal\n         */\n        this.lastMoveEventInfo = null;\n        /**\n         * @internal\n         */\n        this.handlers = {};\n        this.updatePoint = () => {\n            if (!(this.lastMoveEvent && this.lastMoveEventInfo))\n                return;\n            const info = getPanInfo(this.lastMoveEventInfo, this.history);\n            const isPanStarted = this.startEvent !== null;\n            // Only start panning if the offset is larger than 3 pixels. If we make it\n            // any larger than this we'll want to reset the pointer history\n            // on the first update to avoid visual snapping to the cursoe.\n            const isDistancePastThreshold = distance2D(info.offset, { x: 0, y: 0 }) >= 3;\n            if (!isPanStarted && !isDistancePastThreshold)\n                return;\n            const { point } = info;\n            const { timestamp } = frameData;\n            this.history.push({ ...point, timestamp });\n            const { onStart, onMove } = this.handlers;\n            if (!isPanStarted) {\n                onStart && onStart(this.lastMoveEvent, info);\n                this.startEvent = this.lastMoveEvent;\n            }\n            onMove && onMove(this.lastMoveEvent, info);\n        };\n        this.handlePointerMove = (event, info) => {\n            this.lastMoveEvent = event;\n            this.lastMoveEventInfo = transformPoint(info, this.transformPagePoint);\n            // Throttle mouse move event to once per frame\n            frame.update(this.updatePoint, true);\n        };\n        this.handlePointerUp = (event, info) => {\n            this.end();\n            if (!(this.lastMoveEvent && this.lastMoveEventInfo))\n                return;\n            const { onEnd, onSessionEnd } = this.handlers;\n            const panInfo = getPanInfo(event.type === \"pointercancel\"\n                ? this.lastMoveEventInfo\n                : transformPoint(info, this.transformPagePoint), this.history);\n            if (this.startEvent && onEnd) {\n                onEnd(event, panInfo);\n            }\n            onSessionEnd && onSessionEnd(event, panInfo);\n        };\n        // If we have more than one touch, don't start detecting this gesture\n        if (!isPrimaryPointer(event))\n            return;\n        this.handlers = handlers;\n        this.transformPagePoint = transformPagePoint;\n        const info = extractEventInfo(event);\n        const initialInfo = transformPoint(info, this.transformPagePoint);\n        const { point } = initialInfo;\n        const { timestamp } = frameData;\n        this.history = [{ ...point, timestamp }];\n        const { onSessionStart } = handlers;\n        onSessionStart &&\n            onSessionStart(event, getPanInfo(initialInfo, this.history));\n        this.removeListeners = pipe(addPointerEvent(window, \"pointermove\", this.handlePointerMove), addPointerEvent(window, \"pointerup\", this.handlePointerUp), addPointerEvent(window, \"pointercancel\", this.handlePointerUp));\n    }\n    updateHandlers(handlers) {\n        this.handlers = handlers;\n    }\n    end() {\n        this.removeListeners && this.removeListeners();\n        cancelFrame(this.updatePoint);\n    }\n}\nfunction transformPoint(info, transformPagePoint) {\n    return transformPagePoint ? { point: transformPagePoint(info.point) } : info;\n}\nfunction subtractPoint(a, b) {\n    return { x: a.x - b.x, y: a.y - b.y };\n}\nfunction getPanInfo({ point }, history) {\n    return {\n        point,\n        delta: subtractPoint(point, lastDevicePoint(history)),\n        offset: subtractPoint(point, startDevicePoint(history)),\n        velocity: getVelocity(history, 0.1),\n    };\n}\nfunction startDevicePoint(history) {\n    return history[0];\n}\nfunction lastDevicePoint(history) {\n    return history[history.length - 1];\n}\nfunction getVelocity(history, timeDelta) {\n    if (history.length < 2) {\n        return { x: 0, y: 0 };\n    }\n    let i = history.length - 1;\n    let timestampedPoint = null;\n    const lastPoint = lastDevicePoint(history);\n    while (i >= 0) {\n        timestampedPoint = history[i];\n        if (lastPoint.timestamp - timestampedPoint.timestamp >\n            secondsToMilliseconds(timeDelta)) {\n            break;\n        }\n        i--;\n    }\n    if (!timestampedPoint) {\n        return { x: 0, y: 0 };\n    }\n    const time = millisecondsToSeconds(lastPoint.timestamp - timestampedPoint.timestamp);\n    if (time === 0) {\n        return { x: 0, y: 0 };\n    }\n    const currentVelocity = {\n        x: (lastPoint.x - timestampedPoint.x) / time,\n        y: (lastPoint.y - timestampedPoint.y) / time,\n    };\n    if (currentVelocity.x === Infinity) {\n        currentVelocity.x = 0;\n    }\n    if (currentVelocity.y === Infinity) {\n        currentVelocity.y = 0;\n    }\n    return currentVelocity;\n}\n\nexport { PanSession };\n","import { mix } from '../../utils/mix.mjs';\n\nfunction calcLength(axis) {\n    return axis.max - axis.min;\n}\nfunction isNear(value, target = 0, maxDistance = 0.01) {\n    return Math.abs(value - target) <= maxDistance;\n}\nfunction calcAxisDelta(delta, source, target, origin = 0.5) {\n    delta.origin = origin;\n    delta.originPoint = mix(source.min, source.max, delta.origin);\n    delta.scale = calcLength(target) / calcLength(source);\n    if (isNear(delta.scale, 1, 0.0001) || isNaN(delta.scale))\n        delta.scale = 1;\n    delta.translate =\n        mix(target.min, target.max, delta.origin) - delta.originPoint;\n    if (isNear(delta.translate) || isNaN(delta.translate))\n        delta.translate = 0;\n}\nfunction calcBoxDelta(delta, source, target, origin) {\n    calcAxisDelta(delta.x, source.x, target.x, origin ? origin.originX : undefined);\n    calcAxisDelta(delta.y, source.y, target.y, origin ? origin.originY : undefined);\n}\nfunction calcRelativeAxis(target, relative, parent) {\n    target.min = parent.min + relative.min;\n    target.max = target.min + calcLength(relative);\n}\nfunction calcRelativeBox(target, relative, parent) {\n    calcRelativeAxis(target.x, relative.x, parent.x);\n    calcRelativeAxis(target.y, relative.y, parent.y);\n}\nfunction calcRelativeAxisPosition(target, layout, parent) {\n    target.min = layout.min - parent.min;\n    target.max = target.min + calcLength(layout);\n}\nfunction calcRelativePosition(target, layout, parent) {\n    calcRelativeAxisPosition(target.x, layout.x, parent.x);\n    calcRelativeAxisPosition(target.y, layout.y, parent.y);\n}\n\nexport { calcAxisDelta, calcBoxDelta, calcLength, calcRelativeAxis, calcRelativeAxisPosition, calcRelativeBox, calcRelativePosition, isNear };\n","import { progress } from '../../../utils/progress.mjs';\nimport { calcLength } from '../../../projection/geometry/delta-calc.mjs';\nimport { clamp } from '../../../utils/clamp.mjs';\nimport { mix } from '../../../utils/mix.mjs';\n\n/**\n * Apply constraints to a point. These constraints are both physical along an\n * axis, and an elastic factor that determines how much to constrain the point\n * by if it does lie outside the defined parameters.\n */\nfunction applyConstraints(point, { min, max }, elastic) {\n    if (min !== undefined && point < min) {\n        // If we have a min point defined, and this is outside of that, constrain\n        point = elastic ? mix(min, point, elastic.min) : Math.max(point, min);\n    }\n    else if (max !== undefined && point > max) {\n        // If we have a max point defined, and this is outside of that, constrain\n        point = elastic ? mix(max, point, elastic.max) : Math.min(point, max);\n    }\n    return point;\n}\n/**\n * Calculate constraints in terms of the viewport when defined relatively to the\n * measured axis. This is measured from the nearest edge, so a max constraint of 200\n * on an axis with a max value of 300 would return a constraint of 500 - axis length\n */\nfunction calcRelativeAxisConstraints(axis, min, max) {\n    return {\n        min: min !== undefined ? axis.min + min : undefined,\n        max: max !== undefined\n            ? axis.max + max - (axis.max - axis.min)\n            : undefined,\n    };\n}\n/**\n * Calculate constraints in terms of the viewport when\n * defined relatively to the measured bounding box.\n */\nfunction calcRelativeConstraints(layoutBox, { top, left, bottom, right }) {\n    return {\n        x: calcRelativeAxisConstraints(layoutBox.x, left, right),\n        y: calcRelativeAxisConstraints(layoutBox.y, top, bottom),\n    };\n}\n/**\n * Calculate viewport constraints when defined as another viewport-relative axis\n */\nfunction calcViewportAxisConstraints(layoutAxis, constraintsAxis) {\n    let min = constraintsAxis.min - layoutAxis.min;\n    let max = constraintsAxis.max - layoutAxis.max;\n    // If the constraints axis is actually smaller than the layout axis then we can\n    // flip the constraints\n    if (constraintsAxis.max - constraintsAxis.min <\n        layoutAxis.max - layoutAxis.min) {\n        [min, max] = [max, min];\n    }\n    return { min, max };\n}\n/**\n * Calculate viewport constraints when defined as another viewport-relative box\n */\nfunction calcViewportConstraints(layoutBox, constraintsBox) {\n    return {\n        x: calcViewportAxisConstraints(layoutBox.x, constraintsBox.x),\n        y: calcViewportAxisConstraints(layoutBox.y, constraintsBox.y),\n    };\n}\n/**\n * Calculate a transform origin relative to the source axis, between 0-1, that results\n * in an asthetically pleasing scale/transform needed to project from source to target.\n */\nfunction calcOrigin(source, target) {\n    let origin = 0.5;\n    const sourceLength = calcLength(source);\n    const targetLength = calcLength(target);\n    if (targetLength > sourceLength) {\n        origin = progress(target.min, target.max - sourceLength, source.min);\n    }\n    else if (sourceLength > targetLength) {\n        origin = progress(source.min, source.max - targetLength, target.min);\n    }\n    return clamp(0, 1, origin);\n}\n/**\n * Rebase the calculated viewport constraints relative to the layout.min point.\n */\nfunction rebaseAxisConstraints(layout, constraints) {\n    const relativeConstraints = {};\n    if (constraints.min !== undefined) {\n        relativeConstraints.min = constraints.min - layout.min;\n    }\n    if (constraints.max !== undefined) {\n        relativeConstraints.max = constraints.max - layout.min;\n    }\n    return relativeConstraints;\n}\nconst defaultElastic = 0.35;\n/**\n * Accepts a dragElastic prop and returns resolved elastic values for each axis.\n */\nfunction resolveDragElastic(dragElastic = defaultElastic) {\n    if (dragElastic === false) {\n        dragElastic = 0;\n    }\n    else if (dragElastic === true) {\n        dragElastic = defaultElastic;\n    }\n    return {\n        x: resolveAxisElastic(dragElastic, \"left\", \"right\"),\n        y: resolveAxisElastic(dragElastic, \"top\", \"bottom\"),\n    };\n}\nfunction resolveAxisElastic(dragElastic, minLabel, maxLabel) {\n    return {\n        min: resolvePointElastic(dragElastic, minLabel),\n        max: resolvePointElastic(dragElastic, maxLabel),\n    };\n}\nfunction resolvePointElastic(dragElastic, label) {\n    return typeof dragElastic === \"number\"\n        ? dragElastic\n        : dragElastic[label] || 0;\n}\n\nexport { applyConstraints, calcOrigin, calcRelativeAxisConstraints, calcRelativeConstraints, calcViewportAxisConstraints, calcViewportConstraints, defaultElastic, rebaseAxisConstraints, resolveAxisElastic, resolveDragElastic, resolvePointElastic };\n","function eachAxis(callback) {\n    return [callback(\"x\"), callback(\"y\")];\n}\n\nexport { eachAxis };\n","import { invariant } from '../../utils/errors.mjs';\nimport { PanSession } from '../pan/PanSession.mjs';\nimport { getGlobalLock } from './utils/lock.mjs';\nimport { isRefObject } from '../../utils/is-ref-object.mjs';\nimport { addPointerEvent } from '../../events/add-pointer-event.mjs';\nimport { applyConstraints, calcRelativeConstraints, resolveDragElastic, calcViewportConstraints, defaultElastic, rebaseAxisConstraints, calcOrigin } from './utils/constraints.mjs';\nimport { createBox } from '../../projection/geometry/models.mjs';\nimport { eachAxis } from '../../projection/utils/each-axis.mjs';\nimport { measurePageBox } from '../../projection/utils/measure.mjs';\nimport { extractEventInfo } from '../../events/event-info.mjs';\nimport { convertBoxToBoundingBox, convertBoundingBoxToBox } from '../../projection/geometry/conversion.mjs';\nimport { addDomEvent } from '../../events/add-dom-event.mjs';\nimport { calcLength } from '../../projection/geometry/delta-calc.mjs';\nimport { mix } from '../../utils/mix.mjs';\nimport { percent } from '../../value/types/numbers/units.mjs';\nimport { animateMotionValue } from '../../animation/interfaces/motion-value.mjs';\nimport { frame } from '../../frameloop/frame.mjs';\n\nconst elementDragControls = new WeakMap();\n/**\n *\n */\n// let latestPointerEvent: PointerEvent\nclass VisualElementDragControls {\n    constructor(visualElement) {\n        // This is a reference to the global drag gesture lock, ensuring only one component\n        // can \"capture\" the drag of one or both axes.\n        // TODO: Look into moving this into pansession?\n        this.openGlobalLock = null;\n        this.isDragging = false;\n        this.currentDirection = null;\n        this.originPoint = { x: 0, y: 0 };\n        /**\n         * The permitted boundaries of travel, in pixels.\n         */\n        this.constraints = false;\n        this.hasMutatedConstraints = false;\n        /**\n         * The per-axis resolved elastic values.\n         */\n        this.elastic = createBox();\n        this.visualElement = visualElement;\n    }\n    start(originEvent, { snapToCursor = false } = {}) {\n        /**\n         * Don't start dragging if this component is exiting\n         */\n        const { presenceContext } = this.visualElement;\n        if (presenceContext && presenceContext.isPresent === false)\n            return;\n        const onSessionStart = (event) => {\n            // Stop any animations on both axis values immediately. This allows the user to throw and catch\n            // the component.\n            this.stopAnimation();\n            if (snapToCursor) {\n                this.snapToCursor(extractEventInfo(event, \"page\").point);\n            }\n        };\n        const onStart = (event, info) => {\n            // Attempt to grab the global drag gesture lock - maybe make this part of PanSession\n            const { drag, dragPropagation, onDragStart } = this.getProps();\n            if (drag && !dragPropagation) {\n                if (this.openGlobalLock)\n                    this.openGlobalLock();\n                this.openGlobalLock = getGlobalLock(drag);\n                // If we don 't have the lock, don't start dragging\n                if (!this.openGlobalLock)\n                    return;\n            }\n            this.isDragging = true;\n            this.currentDirection = null;\n            this.resolveConstraints();\n            if (this.visualElement.projection) {\n                this.visualElement.projection.isAnimationBlocked = true;\n                this.visualElement.projection.target = undefined;\n            }\n            /**\n             * Record gesture origin\n             */\n            eachAxis((axis) => {\n                let current = this.getAxisMotionValue(axis).get() || 0;\n                /**\n                 * If the MotionValue is a percentage value convert to px\n                 */\n                if (percent.test(current)) {\n                    const { projection } = this.visualElement;\n                    if (projection && projection.layout) {\n                        const measuredAxis = projection.layout.layoutBox[axis];\n                        if (measuredAxis) {\n                            const length = calcLength(measuredAxis);\n                            current = length * (parseFloat(current) / 100);\n                        }\n                    }\n                }\n                this.originPoint[axis] = current;\n            });\n            // Fire onDragStart event\n            if (onDragStart) {\n                frame.update(() => onDragStart(event, info), false, true);\n            }\n            const { animationState } = this.visualElement;\n            animationState && animationState.setActive(\"whileDrag\", true);\n        };\n        const onMove = (event, info) => {\n            // latestPointerEvent = event\n            const { dragPropagation, dragDirectionLock, onDirectionLock, onDrag, } = this.getProps();\n            // If we didn't successfully receive the gesture lock, early return.\n            if (!dragPropagation && !this.openGlobalLock)\n                return;\n            const { offset } = info;\n            // Attempt to detect drag direction if directionLock is true\n            if (dragDirectionLock && this.currentDirection === null) {\n                this.currentDirection = getCurrentDirection(offset);\n                // If we've successfully set a direction, notify listener\n                if (this.currentDirection !== null) {\n                    onDirectionLock && onDirectionLock(this.currentDirection);\n                }\n                return;\n            }\n            // Update each point with the latest position\n            this.updateAxis(\"x\", info.point, offset);\n            this.updateAxis(\"y\", info.point, offset);\n            /**\n             * Ideally we would leave the renderer to fire naturally at the end of\n             * this frame but if the element is about to change layout as the result\n             * of a re-render we want to ensure the browser can read the latest\n             * bounding box to ensure the pointer and element don't fall out of sync.\n             */\n            this.visualElement.render();\n            /**\n             * This must fire after the render call as it might trigger a state\n             * change which itself might trigger a layout update.\n             */\n            onDrag && onDrag(event, info);\n        };\n        const onSessionEnd = (event, info) => this.stop(event, info);\n        this.panSession = new PanSession(originEvent, {\n            onSessionStart,\n            onStart,\n            onMove,\n            onSessionEnd,\n        }, { transformPagePoint: this.visualElement.getTransformPagePoint() });\n    }\n    stop(event, info) {\n        const isDragging = this.isDragging;\n        this.cancel();\n        if (!isDragging)\n            return;\n        const { velocity } = info;\n        this.startAnimation(velocity);\n        const { onDragEnd } = this.getProps();\n        if (onDragEnd) {\n            frame.update(() => onDragEnd(event, info));\n        }\n    }\n    cancel() {\n        this.isDragging = false;\n        const { projection, animationState } = this.visualElement;\n        if (projection) {\n            projection.isAnimationBlocked = false;\n        }\n        this.panSession && this.panSession.end();\n        this.panSession = undefined;\n        const { dragPropagation } = this.getProps();\n        if (!dragPropagation && this.openGlobalLock) {\n            this.openGlobalLock();\n            this.openGlobalLock = null;\n        }\n        animationState && animationState.setActive(\"whileDrag\", false);\n    }\n    updateAxis(axis, _point, offset) {\n        const { drag } = this.getProps();\n        // If we're not dragging this axis, do an early return.\n        if (!offset || !shouldDrag(axis, drag, this.currentDirection))\n            return;\n        const axisValue = this.getAxisMotionValue(axis);\n        let next = this.originPoint[axis] + offset[axis];\n        // Apply constraints\n        if (this.constraints && this.constraints[axis]) {\n            next = applyConstraints(next, this.constraints[axis], this.elastic[axis]);\n        }\n        axisValue.set(next);\n    }\n    resolveConstraints() {\n        const { dragConstraints, dragElastic } = this.getProps();\n        const { layout } = this.visualElement.projection || {};\n        const prevConstraints = this.constraints;\n        if (dragConstraints && isRefObject(dragConstraints)) {\n            if (!this.constraints) {\n                this.constraints = this.resolveRefConstraints();\n            }\n        }\n        else {\n            if (dragConstraints && layout) {\n                this.constraints = calcRelativeConstraints(layout.layoutBox, dragConstraints);\n            }\n            else {\n                this.constraints = false;\n            }\n        }\n        this.elastic = resolveDragElastic(dragElastic);\n        /**\n         * If we're outputting to external MotionValues, we want to rebase the measured constraints\n         * from viewport-relative to component-relative.\n         */\n        if (prevConstraints !== this.constraints &&\n            layout &&\n            this.constraints &&\n            !this.hasMutatedConstraints) {\n            eachAxis((axis) => {\n                if (this.getAxisMotionValue(axis)) {\n                    this.constraints[axis] = rebaseAxisConstraints(layout.layoutBox[axis], this.constraints[axis]);\n                }\n            });\n        }\n    }\n    resolveRefConstraints() {\n        const { dragConstraints: constraints, onMeasureDragConstraints } = this.getProps();\n        if (!constraints || !isRefObject(constraints))\n            return false;\n        const constraintsElement = constraints.current;\n        invariant(constraintsElement !== null, \"If `dragConstraints` is set as a React ref, that ref must be passed to another component's `ref` prop.\");\n        const { projection } = this.visualElement;\n        // TODO\n        if (!projection || !projection.layout)\n            return false;\n        const constraintsBox = measurePageBox(constraintsElement, projection.root, this.visualElement.getTransformPagePoint());\n        let measuredConstraints = calcViewportConstraints(projection.layout.layoutBox, constraintsBox);\n        /**\n         * If there's an onMeasureDragConstraints listener we call it and\n         * if different constraints are returned, set constraints to that\n         */\n        if (onMeasureDragConstraints) {\n            const userConstraints = onMeasureDragConstraints(convertBoxToBoundingBox(measuredConstraints));\n            this.hasMutatedConstraints = !!userConstraints;\n            if (userConstraints) {\n                measuredConstraints = convertBoundingBoxToBox(userConstraints);\n            }\n        }\n        return measuredConstraints;\n    }\n    startAnimation(velocity) {\n        const { drag, dragMomentum, dragElastic, dragTransition, dragSnapToOrigin, onDragTransitionEnd, } = this.getProps();\n        const constraints = this.constraints || {};\n        const momentumAnimations = eachAxis((axis) => {\n            if (!shouldDrag(axis, drag, this.currentDirection)) {\n                return;\n            }\n            let transition = (constraints && constraints[axis]) || {};\n            if (dragSnapToOrigin)\n                transition = { min: 0, max: 0 };\n            /**\n             * Overdamp the boundary spring if `dragElastic` is disabled. There's still a frame\n             * of spring animations so we should look into adding a disable spring option to `inertia`.\n             * We could do something here where we affect the `bounceStiffness` and `bounceDamping`\n             * using the value of `dragElastic`.\n             */\n            const bounceStiffness = dragElastic ? 200 : 1000000;\n            const bounceDamping = dragElastic ? 40 : 10000000;\n            const inertia = {\n                type: \"inertia\",\n                velocity: dragMomentum ? velocity[axis] : 0,\n                bounceStiffness,\n                bounceDamping,\n                timeConstant: 750,\n                restDelta: 1,\n                restSpeed: 10,\n                ...dragTransition,\n                ...transition,\n            };\n            // If we're not animating on an externally-provided `MotionValue` we can use the\n            // component's animation controls which will handle interactions with whileHover (etc),\n            // otherwise we just have to animate the `MotionValue` itself.\n            return this.startAxisValueAnimation(axis, inertia);\n        });\n        // Run all animations and then resolve the new drag constraints.\n        return Promise.all(momentumAnimations).then(onDragTransitionEnd);\n    }\n    startAxisValueAnimation(axis, transition) {\n        const axisValue = this.getAxisMotionValue(axis);\n        return axisValue.start(animateMotionValue(axis, axisValue, 0, transition));\n    }\n    stopAnimation() {\n        eachAxis((axis) => this.getAxisMotionValue(axis).stop());\n    }\n    /**\n     * Drag works differently depending on which props are provided.\n     *\n     * - If _dragX and _dragY are provided, we output the gesture delta directly to those motion values.\n     * - Otherwise, we apply the delta to the x/y motion values.\n     */\n    getAxisMotionValue(axis) {\n        const dragKey = \"_drag\" + axis.toUpperCase();\n        const props = this.visualElement.getProps();\n        const externalMotionValue = props[dragKey];\n        return externalMotionValue\n            ? externalMotionValue\n            : this.visualElement.getValue(axis, (props.initial ? props.initial[axis] : undefined) || 0);\n    }\n    snapToCursor(point) {\n        eachAxis((axis) => {\n            const { drag } = this.getProps();\n            // If we're not dragging this axis, do an early return.\n            if (!shouldDrag(axis, drag, this.currentDirection))\n                return;\n            const { projection } = this.visualElement;\n            const axisValue = this.getAxisMotionValue(axis);\n            if (projection && projection.layout) {\n                const { min, max } = projection.layout.layoutBox[axis];\n                axisValue.set(point[axis] - mix(min, max, 0.5));\n            }\n        });\n    }\n    /**\n     * When the viewport resizes we want to check if the measured constraints\n     * have changed and, if so, reposition the element within those new constraints\n     * relative to where it was before the resize.\n     */\n    scalePositionWithinConstraints() {\n        if (!this.visualElement.current)\n            return;\n        const { drag, dragConstraints } = this.getProps();\n        const { projection } = this.visualElement;\n        if (!isRefObject(dragConstraints) || !projection || !this.constraints)\n            return;\n        /**\n         * Stop current animations as there can be visual glitching if we try to do\n         * this mid-animation\n         */\n        this.stopAnimation();\n        /**\n         * Record the relative position of the dragged element relative to the\n         * constraints box and save as a progress value.\n         */\n        const boxProgress = { x: 0, y: 0 };\n        eachAxis((axis) => {\n            const axisValue = this.getAxisMotionValue(axis);\n            if (axisValue) {\n                const latest = axisValue.get();\n                boxProgress[axis] = calcOrigin({ min: latest, max: latest }, this.constraints[axis]);\n            }\n        });\n        /**\n         * Update the layout of this element and resolve the latest drag constraints\n         */\n        const { transformTemplate } = this.visualElement.getProps();\n        this.visualElement.current.style.transform = transformTemplate\n            ? transformTemplate({}, \"\")\n            : \"none\";\n        projection.root && projection.root.updateScroll();\n        projection.updateLayout();\n        this.resolveConstraints();\n        /**\n         * For each axis, calculate the current progress of the layout axis\n         * within the new constraints.\n         */\n        eachAxis((axis) => {\n            if (!shouldDrag(axis, drag, null))\n                return;\n            /**\n             * Calculate a new transform based on the previous box progress\n             */\n            const axisValue = this.getAxisMotionValue(axis);\n            const { min, max } = this.constraints[axis];\n            axisValue.set(mix(min, max, boxProgress[axis]));\n        });\n    }\n    addListeners() {\n        if (!this.visualElement.current)\n            return;\n        elementDragControls.set(this.visualElement, this);\n        const element = this.visualElement.current;\n        /**\n         * Attach a pointerdown event listener on this DOM element to initiate drag tracking.\n         */\n        const stopPointerListener = addPointerEvent(element, \"pointerdown\", (event) => {\n            const { drag, dragListener = true } = this.getProps();\n            drag && dragListener && this.start(event);\n        });\n        const measureDragConstraints = () => {\n            const { dragConstraints } = this.getProps();\n            if (isRefObject(dragConstraints)) {\n                this.constraints = this.resolveRefConstraints();\n            }\n        };\n        const { projection } = this.visualElement;\n        const stopMeasureLayoutListener = projection.addEventListener(\"measure\", measureDragConstraints);\n        if (projection && !projection.layout) {\n            projection.root && projection.root.updateScroll();\n            projection.updateLayout();\n        }\n        measureDragConstraints();\n        /**\n         * Attach a window resize listener to scale the draggable target within its defined\n         * constraints as the window resizes.\n         */\n        const stopResizeListener = addDomEvent(window, \"resize\", () => this.scalePositionWithinConstraints());\n        /**\n         * If the element's layout changes, calculate the delta and apply that to\n         * the drag gesture's origin point.\n         */\n        const stopLayoutUpdateListener = projection.addEventListener(\"didUpdate\", (({ delta, hasLayoutChanged }) => {\n            if (this.isDragging && hasLayoutChanged) {\n                eachAxis((axis) => {\n                    const motionValue = this.getAxisMotionValue(axis);\n                    if (!motionValue)\n                        return;\n                    this.originPoint[axis] += delta[axis].translate;\n                    motionValue.set(motionValue.get() + delta[axis].translate);\n                });\n                this.visualElement.render();\n            }\n        }));\n        return () => {\n            stopResizeListener();\n            stopPointerListener();\n            stopMeasureLayoutListener();\n            stopLayoutUpdateListener && stopLayoutUpdateListener();\n        };\n    }\n    getProps() {\n        const props = this.visualElement.getProps();\n        const { drag = false, dragDirectionLock = false, dragPropagation = false, dragConstraints = false, dragElastic = defaultElastic, dragMomentum = true, } = props;\n        return {\n            ...props,\n            drag,\n            dragDirectionLock,\n            dragPropagation,\n            dragConstraints,\n            dragElastic,\n            dragMomentum,\n        };\n    }\n}\nfunction shouldDrag(direction, drag, currentDirection) {\n    return ((drag === true || drag === direction) &&\n        (currentDirection === null || currentDirection === direction));\n}\n/**\n * Based on an x/y offset determine the current drag direction. If both axis' offsets are lower\n * than the provided threshold, return `null`.\n *\n * @param offset - The x/y offset from origin.\n * @param lockThreshold - (Optional) - the minimum absolute offset before we can determine a drag direction.\n */\nfunction getCurrentDirection(offset, lockThreshold = 10) {\n    let direction = null;\n    if (Math.abs(offset.y) > lockThreshold) {\n        direction = \"y\";\n    }\n    else if (Math.abs(offset.x) > lockThreshold) {\n        direction = \"x\";\n    }\n    return direction;\n}\n\nexport { VisualElementDragControls, elementDragControls };\n","import { Feature } from '../../motion/features/Feature.mjs';\nimport { noop } from '../../utils/noop.mjs';\nimport { VisualElementDragControls } from './VisualElementDragControls.mjs';\n\nclass DragGesture extends Feature {\n    constructor(node) {\n        super(node);\n        this.removeGroupControls = noop;\n        this.removeListeners = noop;\n        this.controls = new VisualElementDragControls(node);\n    }\n    mount() {\n        // If we've been provided a DragControls for manual control over the drag gesture,\n        // subscribe this component to it on mount.\n        const { dragControls } = this.node.getProps();\n        if (dragControls) {\n            this.removeGroupControls = dragControls.subscribe(this.controls);\n        }\n        this.removeListeners = this.controls.addListeners() || noop;\n    }\n    unmount() {\n        this.removeGroupControls();\n        this.removeListeners();\n    }\n}\n\nexport { DragGesture };\n","import { PanSession } from './PanSession.mjs';\nimport { addPointerEvent } from '../../events/add-pointer-event.mjs';\nimport { Feature } from '../../motion/features/Feature.mjs';\nimport { noop } from '../../utils/noop.mjs';\nimport { frame } from '../../frameloop/frame.mjs';\n\nconst asyncHandler = (handler) => (event, info) => {\n    if (handler) {\n        frame.update(() => handler(event, info));\n    }\n};\nclass PanGesture extends Feature {\n    constructor() {\n        super(...arguments);\n        this.removePointerDownListener = noop;\n    }\n    onPointerDown(pointerDownEvent) {\n        this.session = new PanSession(pointerDownEvent, this.createPanHandlers(), { transformPagePoint: this.node.getTransformPagePoint() });\n    }\n    createPanHandlers() {\n        const { onPanSessionStart, onPanStart, onPan, onPanEnd } = this.node.getProps();\n        return {\n            onSessionStart: asyncHandler(onPanSessionStart),\n            onStart: asyncHandler(onPanStart),\n            onMove: onPan,\n            onEnd: (event, info) => {\n                delete this.session;\n                if (onPanEnd) {\n                    frame.update(() => onPanEnd(event, info));\n                }\n            },\n        };\n    }\n    mount() {\n        this.removePointerDownListener = addPointerEvent(this.node.current, \"pointerdown\", (event) => this.onPointerDown(event));\n    }\n    update() {\n        this.session && this.session.updateHandlers(this.createPanHandlers());\n    }\n    unmount() {\n        this.removePointerDownListener();\n        this.session && this.session.end();\n    }\n}\n\nexport { PanGesture };\n","/**\n * This should only ever be modified on the client otherwise it'll\n * persist through server requests. If we need instanced states we\n * could lazy-init via root.\n */\nconst globalProjectionState = {\n    /**\n     * Global flag as to whether the tree has animated since the last time\n     * we resized the window\n     */\n    hasAnimatedSinceResize: true,\n    /**\n     * We set this to true once, on the first update. Any nodes added to the tree beyond that\n     * update will be given a `data-projection-id` attribute.\n     */\n    hasEverUpdated: false,\n};\n\nexport { globalProjectionState };\n","import { px } from '../../value/types/numbers/units.mjs';\n\nfunction pixelsToPercent(pixels, axis) {\n    if (axis.max === axis.min)\n        return 0;\n    return (pixels / (axis.max - axis.min)) * 100;\n}\n/**\n * We always correct borderRadius as a percentage rather than pixels to reduce paints.\n * For example, if you are projecting a box that is 100px wide with a 10px borderRadius\n * into a box that is 200px wide with a 20px borderRadius, that is actually a 10%\n * borderRadius in both states. If we animate between the two in pixels that will trigger\n * a paint each time. If we animate between the two in percentage we'll avoid a paint.\n */\nconst correctBorderRadius = {\n    correct: (latest, node) => {\n        if (!node.target)\n            return latest;\n        /**\n         * If latest is a string, if it's a percentage we can return immediately as it's\n         * going to be stretched appropriately. Otherwise, if it's a pixel, convert it to a number.\n         */\n        if (typeof latest === \"string\") {\n            if (px.test(latest)) {\n                latest = parseFloat(latest);\n            }\n            else {\n                return latest;\n            }\n        }\n        /**\n         * If latest is a number, it's a pixel value. We use the current viewportBox to calculate that\n         * pixel value as a percentage of each axis\n         */\n        const x = pixelsToPercent(latest, node.target.x);\n        const y = pixelsToPercent(latest, node.target.y);\n        return `${x}% ${y}%`;\n    },\n};\n\nexport { correctBorderRadius, pixelsToPercent };\n","import { mix } from '../../utils/mix.mjs';\nimport { complex } from '../../value/types/complex/index.mjs';\n\nconst correctBoxShadow = {\n    correct: (latest, { treeScale, projectionDelta }) => {\n        const original = latest;\n        const shadow = complex.parse(latest);\n        // TODO: Doesn't support multiple shadows\n        if (shadow.length > 5)\n            return original;\n        const template = complex.createTransformer(latest);\n        const offset = typeof shadow[0] !== \"number\" ? 1 : 0;\n        // Calculate the overall context scale\n        const xScale = projectionDelta.x.scale * treeScale.x;\n        const yScale = projectionDelta.y.scale * treeScale.y;\n        shadow[0 + offset] /= xScale;\n        shadow[1 + offset] /= yScale;\n        /**\n         * Ideally we'd correct x and y scales individually, but because blur and\n         * spread apply to both we have to take a scale average and apply that instead.\n         * We could potentially improve the outcome of this by incorporating the ratio between\n         * the two scales.\n         */\n        const averageScale = mix(xScale, yScale, 0.5);\n        // Blur\n        if (typeof shadow[2 + offset] === \"number\")\n            shadow[2 + offset] /= averageScale;\n        // Spread\n        if (typeof shadow[3 + offset] === \"number\")\n            shadow[3 + offset] /= averageScale;\n        return template(shadow);\n    },\n};\n\nexport { correctBoxShadow };\n","import React__default, { useContext } from 'react';\nimport { usePresence } from '../../../components/AnimatePresence/use-presence.mjs';\nimport { LayoutGroupContext } from '../../../context/LayoutGroupContext.mjs';\nimport { SwitchLayoutGroupContext } from '../../../context/SwitchLayoutGroupContext.mjs';\nimport { globalProjectionState } from '../../../projection/node/state.mjs';\nimport { correctBorderRadius } from '../../../projection/styles/scale-border-radius.mjs';\nimport { correctBoxShadow } from '../../../projection/styles/scale-box-shadow.mjs';\nimport { addScaleCorrector } from '../../../projection/styles/scale-correction.mjs';\nimport { frame } from '../../../frameloop/frame.mjs';\n\nclass MeasureLayoutWithContext extends React__default.Component {\n    /**\n     * This only mounts projection nodes for components that\n     * need measuring, we might want to do it for all components\n     * in order to incorporate transforms\n     */\n    componentDidMount() {\n        const { visualElement, layoutGroup, switchLayoutGroup, layoutId } = this.props;\n        const { projection } = visualElement;\n        addScaleCorrector(defaultScaleCorrectors);\n        if (projection) {\n            if (layoutGroup.group)\n                layoutGroup.group.add(projection);\n            if (switchLayoutGroup && switchLayoutGroup.register && layoutId) {\n                switchLayoutGroup.register(projection);\n            }\n            projection.root.didUpdate();\n            projection.addEventListener(\"animationComplete\", () => {\n                this.safeToRemove();\n            });\n            projection.setOptions({\n                ...projection.options,\n                onExitComplete: () => this.safeToRemove(),\n            });\n        }\n        globalProjectionState.hasEverUpdated = true;\n    }\n    getSnapshotBeforeUpdate(prevProps) {\n        const { layoutDependency, visualElement, drag, isPresent } = this.props;\n        const projection = visualElement.projection;\n        if (!projection)\n            return null;\n        /**\n         * TODO: We use this data in relegate to determine whether to\n         * promote a previous element. There's no guarantee its presence data\n         * will have updated by this point - if a bug like this arises it will\n         * have to be that we markForRelegation and then find a new lead some other way,\n         * perhaps in didUpdate\n         */\n        projection.isPresent = isPresent;\n        if (drag ||\n            prevProps.layoutDependency !== layoutDependency ||\n            layoutDependency === undefined) {\n            projection.willUpdate();\n        }\n        else {\n            this.safeToRemove();\n        }\n        if (prevProps.isPresent !== isPresent) {\n            if (isPresent) {\n                projection.promote();\n            }\n            else if (!projection.relegate()) {\n                /**\n                 * If there's another stack member taking over from this one,\n                 * it's in charge of the exit animation and therefore should\n                 * be in charge of the safe to remove. Otherwise we call it here.\n                 */\n                frame.postRender(() => {\n                    const stack = projection.getStack();\n                    if (!stack || !stack.members.length) {\n                        this.safeToRemove();\n                    }\n                });\n            }\n        }\n        return null;\n    }\n    componentDidUpdate() {\n        const { projection } = this.props.visualElement;\n        if (projection) {\n            projection.root.didUpdate();\n            queueMicrotask(() => {\n                if (!projection.currentAnimation && projection.isLead()) {\n                    this.safeToRemove();\n                }\n            });\n        }\n    }\n    componentWillUnmount() {\n        const { visualElement, layoutGroup, switchLayoutGroup: promoteContext, } = this.props;\n        const { projection } = visualElement;\n        if (projection) {\n            projection.scheduleCheckAfterUnmount();\n            if (layoutGroup && layoutGroup.group)\n                layoutGroup.group.remove(projection);\n            if (promoteContext && promoteContext.deregister)\n                promoteContext.deregister(projection);\n        }\n    }\n    safeToRemove() {\n        const { safeToRemove } = this.props;\n        safeToRemove && safeToRemove();\n    }\n    render() {\n        return null;\n    }\n}\nfunction MeasureLayout(props) {\n    const [isPresent, safeToRemove] = usePresence();\n    const layoutGroup = useContext(LayoutGroupContext);\n    return (React__default.createElement(MeasureLayoutWithContext, { ...props, layoutGroup: layoutGroup, switchLayoutGroup: useContext(SwitchLayoutGroupContext), isPresent: isPresent, safeToRemove: safeToRemove }));\n}\nconst defaultScaleCorrectors = {\n    borderRadius: {\n        ...correctBorderRadius,\n        applyTo: [\n            \"borderTopLeftRadius\",\n            \"borderTopRightRadius\",\n            \"borderBottomLeftRadius\",\n            \"borderBottomRightRadius\",\n        ],\n    },\n    borderTopLeftRadius: correctBorderRadius,\n    borderTopRightRadius: correctBorderRadius,\n    borderBottomLeftRadius: correctBorderRadius,\n    borderBottomRightRadius: correctBorderRadius,\n    boxShadow: correctBoxShadow,\n};\n\nexport { MeasureLayout };\n","import { useContext, useId, useEffect } from 'react';\nimport { PresenceContext } from '../../context/PresenceContext.mjs';\n\n/**\n * When a component is the child of `AnimatePresence`, it can use `usePresence`\n * to access information about whether it's still present in the React tree.\n *\n * ```jsx\n * import { usePresence } from \"framer-motion\"\n *\n * export const Component = () => {\n *   const [isPresent, safeToRemove] = usePresence()\n *\n *   useEffect(() => {\n *     !isPresent && setTimeout(safeToRemove, 1000)\n *   }, [isPresent])\n *\n *   return <div />\n * }\n * ```\n *\n * If `isPresent` is `false`, it means that a component has been removed the tree, but\n * `AnimatePresence` won't really remove it until `safeToRemove` has been called.\n *\n * @public\n */\nfunction usePresence() {\n    const context = useContext(PresenceContext);\n    if (context === null)\n        return [true, null];\n    const { isPresent, onExitComplete, register } = context;\n    // It's safe to call the following hooks conditionally (after an early return) because the context will always\n    // either be null or non-null for the lifespan of the component.\n    const id = useId();\n    useEffect(() => register(id), []);\n    const safeToRemove = () => onExitComplete && onExitComplete(id);\n    return !isPresent && onExitComplete ? [false, safeToRemove] : [true];\n}\n/**\n * Similar to `usePresence`, except `useIsPresent` simply returns whether or not the component is present.\n * There is no `safeToRemove` function.\n *\n * ```jsx\n * import { useIsPresent } from \"framer-motion\"\n *\n * export const Component = () => {\n *   const isPresent = useIsPresent()\n *\n *   useEffect(() => {\n *     !isPresent && console.log(\"I've been removed!\")\n *   }, [isPresent])\n *\n *   return <div />\n * }\n * ```\n *\n * @public\n */\nfunction useIsPresent() {\n    return isPresent(useContext(PresenceContext));\n}\nfunction isPresent(context) {\n    return context === null ? true : context.isPresent;\n}\n\nexport { isPresent, useIsPresent, usePresence };\n","import { circOut } from '../../easing/circ.mjs';\nimport { progress } from '../../utils/progress.mjs';\nimport { mix } from '../../utils/mix.mjs';\nimport { noop } from '../../utils/noop.mjs';\nimport { percent, px } from '../../value/types/numbers/units.mjs';\n\nconst borders = [\"TopLeft\", \"TopRight\", \"BottomLeft\", \"BottomRight\"];\nconst numBorders = borders.length;\nconst asNumber = (value) => typeof value === \"string\" ? parseFloat(value) : value;\nconst isPx = (value) => typeof value === \"number\" || px.test(value);\nfunction mixValues(target, follow, lead, progress, shouldCrossfadeOpacity, isOnlyMember) {\n    if (shouldCrossfadeOpacity) {\n        target.opacity = mix(0, \n        // TODO Reinstate this if only child\n        lead.opacity !== undefined ? lead.opacity : 1, easeCrossfadeIn(progress));\n        target.opacityExit = mix(follow.opacity !== undefined ? follow.opacity : 1, 0, easeCrossfadeOut(progress));\n    }\n    else if (isOnlyMember) {\n        target.opacity = mix(follow.opacity !== undefined ? follow.opacity : 1, lead.opacity !== undefined ? lead.opacity : 1, progress);\n    }\n    /**\n     * Mix border radius\n     */\n    for (let i = 0; i < numBorders; i++) {\n        const borderLabel = `border${borders[i]}Radius`;\n        let followRadius = getRadius(follow, borderLabel);\n        let leadRadius = getRadius(lead, borderLabel);\n        if (followRadius === undefined && leadRadius === undefined)\n            continue;\n        followRadius || (followRadius = 0);\n        leadRadius || (leadRadius = 0);\n        const canMix = followRadius === 0 ||\n            leadRadius === 0 ||\n            isPx(followRadius) === isPx(leadRadius);\n        if (canMix) {\n            target[borderLabel] = Math.max(mix(asNumber(followRadius), asNumber(leadRadius), progress), 0);\n            if (percent.test(leadRadius) || percent.test(followRadius)) {\n                target[borderLabel] += \"%\";\n            }\n        }\n        else {\n            target[borderLabel] = leadRadius;\n        }\n    }\n    /**\n     * Mix rotation\n     */\n    if (follow.rotate || lead.rotate) {\n        target.rotate = mix(follow.rotate || 0, lead.rotate || 0, progress);\n    }\n}\nfunction getRadius(values, radiusName) {\n    return values[radiusName] !== undefined\n        ? values[radiusName]\n        : values.borderRadius;\n}\n// /**\n//  * We only want to mix the background color if there's a follow element\n//  * that we're not crossfading opacity between. For instance with switch\n//  * AnimateSharedLayout animations, this helps the illusion of a continuous\n//  * element being animated but also cuts down on the number of paints triggered\n//  * for elements where opacity is doing that work for us.\n//  */\n// if (\n//     !hasFollowElement &&\n//     latestLeadValues.backgroundColor &&\n//     latestFollowValues.backgroundColor\n// ) {\n//     /**\n//      * This isn't ideal performance-wise as mixColor is creating a new function every frame.\n//      * We could probably create a mixer that runs at the start of the animation but\n//      * the idea behind the crossfader is that it runs dynamically between two potentially\n//      * changing targets (ie opacity or borderRadius may be animating independently via variants)\n//      */\n//     leadState.backgroundColor = followState.backgroundColor = mixColor(\n//         latestFollowValues.backgroundColor as string,\n//         latestLeadValues.backgroundColor as string\n//     )(p)\n// }\nconst easeCrossfadeIn = compress(0, 0.5, circOut);\nconst easeCrossfadeOut = compress(0.5, 0.95, noop);\nfunction compress(min, max, easing) {\n    return (p) => {\n        // Could replace ifs with clamp\n        if (p < min)\n            return 0;\n        if (p > max)\n            return 1;\n        return easing(progress(min, max, p));\n    };\n}\n\nexport { mixValues };\n","/**\n * Reset an axis to the provided origin box.\n *\n * This is a mutative operation.\n */\nfunction copyAxisInto(axis, originAxis) {\n    axis.min = originAxis.min;\n    axis.max = originAxis.max;\n}\n/**\n * Reset a box to the provided origin box.\n *\n * This is a mutative operation.\n */\nfunction copyBoxInto(box, originBox) {\n    copyAxisInto(box.x, originBox.x);\n    copyAxisInto(box.y, originBox.y);\n}\n\nexport { copyAxisInto, copyBoxInto };\n","import { mix } from '../../utils/mix.mjs';\nimport { percent } from '../../value/types/numbers/units.mjs';\nimport { scalePoint } from './delta-apply.mjs';\n\n/**\n * Remove a delta from a point. This is essentially the steps of applyPointDelta in reverse\n */\nfunction removePointDelta(point, translate, scale, originPoint, boxScale) {\n    point -= translate;\n    point = scalePoint(point, 1 / scale, originPoint);\n    if (boxScale !== undefined) {\n        point = scalePoint(point, 1 / boxScale, originPoint);\n    }\n    return point;\n}\n/**\n * Remove a delta from an axis. This is essentially the steps of applyAxisDelta in reverse\n */\nfunction removeAxisDelta(axis, translate = 0, scale = 1, origin = 0.5, boxScale, originAxis = axis, sourceAxis = axis) {\n    if (percent.test(translate)) {\n        translate = parseFloat(translate);\n        const relativeProgress = mix(sourceAxis.min, sourceAxis.max, translate / 100);\n        translate = relativeProgress - sourceAxis.min;\n    }\n    if (typeof translate !== \"number\")\n        return;\n    let originPoint = mix(originAxis.min, originAxis.max, origin);\n    if (axis === originAxis)\n        originPoint -= translate;\n    axis.min = removePointDelta(axis.min, translate, scale, originPoint, boxScale);\n    axis.max = removePointDelta(axis.max, translate, scale, originPoint, boxScale);\n}\n/**\n * Remove a transforms from an axis. This is essentially the steps of applyAxisTransforms in reverse\n * and acts as a bridge between motion values and removeAxisDelta\n */\nfunction removeAxisTransforms(axis, transforms, [key, scaleKey, originKey], origin, sourceAxis) {\n    removeAxisDelta(axis, transforms[key], transforms[scaleKey], transforms[originKey], transforms.scale, origin, sourceAxis);\n}\n/**\n * The names of the motion values we want to apply as translation, scale and origin.\n */\nconst xKeys = [\"x\", \"scaleX\", \"originX\"];\nconst yKeys = [\"y\", \"scaleY\", \"originY\"];\n/**\n * Remove a transforms from an box. This is essentially the steps of applyAxisBox in reverse\n * and acts as a bridge between motion values and removeAxisDelta\n */\nfunction removeBoxTransforms(box, transforms, originBox, sourceBox) {\n    removeAxisTransforms(box.x, transforms, xKeys, originBox ? originBox.x : undefined, sourceBox ? sourceBox.x : undefined);\n    removeAxisTransforms(box.y, transforms, yKeys, originBox ? originBox.y : undefined, sourceBox ? sourceBox.y : undefined);\n}\n\nexport { removeAxisDelta, removeAxisTransforms, removeBoxTransforms, removePointDelta };\n","import { calcLength } from './delta-calc.mjs';\n\nfunction isAxisDeltaZero(delta) {\n    return delta.translate === 0 && delta.scale === 1;\n}\nfunction isDeltaZero(delta) {\n    return isAxisDeltaZero(delta.x) && isAxisDeltaZero(delta.y);\n}\nfunction boxEquals(a, b) {\n    return (a.x.min === b.x.min &&\n        a.x.max === b.x.max &&\n        a.y.min === b.y.min &&\n        a.y.max === b.y.max);\n}\nfunction boxEqualsRounded(a, b) {\n    return (Math.round(a.x.min) === Math.round(b.x.min) &&\n        Math.round(a.x.max) === Math.round(b.x.max) &&\n        Math.round(a.y.min) === Math.round(b.y.min) &&\n        Math.round(a.y.max) === Math.round(b.y.max));\n}\nfunction aspectRatio(box) {\n    return calcLength(box.x) / calcLength(box.y);\n}\n\nexport { aspectRatio, boxEquals, boxEqualsRounded, isDeltaZero };\n","import { addUniqueItem, removeItem } from '../../utils/array.mjs';\n\nclass NodeStack {\n    constructor() {\n        this.members = [];\n    }\n    add(node) {\n        addUniqueItem(this.members, node);\n        node.scheduleRender();\n    }\n    remove(node) {\n        removeItem(this.members, node);\n        if (node === this.prevLead) {\n            this.prevLead = undefined;\n        }\n        if (node === this.lead) {\n            const prevLead = this.members[this.members.length - 1];\n            if (prevLead) {\n                this.promote(prevLead);\n            }\n        }\n    }\n    relegate(node) {\n        const indexOfNode = this.members.findIndex((member) => node === member);\n        if (indexOfNode === 0)\n            return false;\n        /**\n         * Find the next projection node that is present\n         */\n        let prevLead;\n        for (let i = indexOfNode; i >= 0; i--) {\n            const member = this.members[i];\n            if (member.isPresent !== false) {\n                prevLead = member;\n                break;\n            }\n        }\n        if (prevLead) {\n            this.promote(prevLead);\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n    promote(node, preserveFollowOpacity) {\n        const prevLead = this.lead;\n        if (node === prevLead)\n            return;\n        this.prevLead = prevLead;\n        this.lead = node;\n        node.show();\n        if (prevLead) {\n            prevLead.instance && prevLead.scheduleRender();\n            node.scheduleRender();\n            node.resumeFrom = prevLead;\n            if (preserveFollowOpacity) {\n                node.resumeFrom.preserveOpacity = true;\n            }\n            if (prevLead.snapshot) {\n                node.snapshot = prevLead.snapshot;\n                node.snapshot.latestValues =\n                    prevLead.animationValues || prevLead.latestValues;\n            }\n            if (node.root && node.root.isUpdating) {\n                node.isLayoutDirty = true;\n            }\n            const { crossfade } = node.options;\n            if (crossfade === false) {\n                prevLead.hide();\n            }\n            /**\n             * TODO:\n             *   - Test border radius when previous node was deleted\n             *   - boxShadow mixing\n             *   - Shared between element A in scrolled container and element B (scroll stays the same or changes)\n             *   - Shared between element A in transformed container and element B (transform stays the same or changes)\n             *   - Shared between element A in scrolled page and element B (scroll stays the same or changes)\n             * ---\n             *   - Crossfade opacity of root nodes\n             *   - layoutId changes after animation\n             *   - layoutId changes mid animation\n             */\n        }\n    }\n    exitAnimationComplete() {\n        this.members.forEach((node) => {\n            const { options, resumingFrom } = node;\n            options.onExitComplete && options.onExitComplete();\n            if (resumingFrom) {\n                resumingFrom.options.onExitComplete &&\n                    resumingFrom.options.onExitComplete();\n            }\n        });\n    }\n    scheduleRender() {\n        this.members.forEach((node) => {\n            node.instance && node.scheduleRender(false);\n        });\n    }\n    /**\n     * Clear any leads that have been removed this render to prevent them from being\n     * used in future animations and to prevent memory leaks\n     */\n    removeLeadSnapshot() {\n        if (this.lead && this.lead.snapshot) {\n            this.lead.snapshot = undefined;\n        }\n    }\n}\n\nexport { NodeStack };\n","function buildProjectionTransform(delta, treeScale, latestTransform) {\n    let transform = \"\";\n    /**\n     * The translations we use to calculate are always relative to the viewport coordinate space.\n     * But when we apply scales, we also scale the coordinate space of an element and its children.\n     * For instance if we have a treeScale (the culmination of all parent scales) of 0.5 and we need\n     * to move an element 100 pixels, we actually need to move it 200 in within that scaled space.\n     */\n    const xTranslate = delta.x.translate / treeScale.x;\n    const yTranslate = delta.y.translate / treeScale.y;\n    if (xTranslate || yTranslate) {\n        transform = `translate3d(${xTranslate}px, ${yTranslate}px, 0) `;\n    }\n    /**\n     * Apply scale correction for the tree transform.\n     * This will apply scale to the screen-orientated axes.\n     */\n    if (treeScale.x !== 1 || treeScale.y !== 1) {\n        transform += `scale(${1 / treeScale.x}, ${1 / treeScale.y}) `;\n    }\n    if (latestTransform) {\n        const { rotate, rotateX, rotateY } = latestTransform;\n        if (rotate)\n            transform += `rotate(${rotate}deg) `;\n        if (rotateX)\n            transform += `rotateX(${rotateX}deg) `;\n        if (rotateY)\n            transform += `rotateY(${rotateY}deg) `;\n    }\n    /**\n     * Apply scale to match the size of the element to the size we want it.\n     * This will apply scale to the element-orientated axes.\n     */\n    const elementScaleX = delta.x.scale * treeScale.x;\n    const elementScaleY = delta.y.scale * treeScale.y;\n    if (elementScaleX !== 1 || elementScaleY !== 1) {\n        transform += `scale(${elementScaleX}, ${elementScaleY})`;\n    }\n    return transform || \"none\";\n}\n\nexport { buildProjectionTransform };\n","const compareByDepth = (a, b) => a.depth - b.depth;\n\nexport { compareByDepth };\n","import { addUniqueItem, removeItem } from '../../utils/array.mjs';\nimport { compareByDepth } from './compare-by-depth.mjs';\n\nclass FlatTree {\n    constructor() {\n        this.children = [];\n        this.isDirty = false;\n    }\n    add(child) {\n        addUniqueItem(this.children, child);\n        this.isDirty = true;\n    }\n    remove(child) {\n        removeItem(this.children, child);\n        this.isDirty = true;\n    }\n    forEach(callback) {\n        this.isDirty && this.children.sort(compareByDepth);\n        this.isDirty = false;\n        this.children.forEach(callback);\n    }\n}\n\nexport { FlatTree };\n","import { SubscriptionManager } from '../../utils/subscription-manager.mjs';\nimport { mixValues } from '../animation/mix-values.mjs';\nimport { copyBoxInto } from '../geometry/copy.mjs';\nimport { translateAxis, transformBox, applyBoxDelta, applyTreeDeltas } from '../geometry/delta-apply.mjs';\nimport { calcRelativePosition, calcRelativeBox, calcBoxDelta, calcLength, isNear } from '../geometry/delta-calc.mjs';\nimport { removeBoxTransforms } from '../geometry/delta-remove.mjs';\nimport { createBox, createDelta } from '../geometry/models.mjs';\nimport { getValueTransition } from '../../animation/utils/transitions.mjs';\nimport { boxEqualsRounded, isDeltaZero, aspectRatio, boxEquals } from '../geometry/utils.mjs';\nimport { NodeStack } from '../shared/stack.mjs';\nimport { scaleCorrectors } from '../styles/scale-correction.mjs';\nimport { buildProjectionTransform } from '../styles/transform.mjs';\nimport { eachAxis } from '../utils/each-axis.mjs';\nimport { hasTransform, hasScale, has2DTranslate } from '../utils/has-transform.mjs';\nimport { FlatTree } from '../../render/utils/flat-tree.mjs';\nimport { resolveMotionValue } from '../../value/utils/resolve-motion-value.mjs';\nimport { globalProjectionState } from './state.mjs';\nimport { delay } from '../../utils/delay.mjs';\nimport { mix } from '../../utils/mix.mjs';\nimport { record } from '../../debug/record.mjs';\nimport { isSVGElement } from '../../render/dom/utils/is-svg-element.mjs';\nimport { animateSingleValue } from '../../animation/interfaces/single-value.mjs';\nimport { clamp } from '../../utils/clamp.mjs';\nimport { cancelFrame, frameData, steps, frame } from '../../frameloop/frame.mjs';\nimport { noop } from '../../utils/noop.mjs';\n\nconst transformAxes = [\"\", \"X\", \"Y\", \"Z\"];\n/**\n * We use 1000 as the animation target as 0-1000 maps better to pixels than 0-1\n * which has a noticeable difference in spring animations\n */\nconst animationTarget = 1000;\nlet id = 0;\n/**\n * Use a mutable data object for debug data so as to not create a new\n * object every frame.\n */\nconst projectionFrameData = {\n    type: \"projectionFrame\",\n    totalNodes: 0,\n    resolvedTargetDeltas: 0,\n    recalculatedProjection: 0,\n};\nfunction createProjectionNode({ attachResizeListener, defaultParent, measureScroll, checkIsScrollRoot, resetTransform, }) {\n    return class ProjectionNode {\n        constructor(latestValues = {}, parent = defaultParent === null || defaultParent === void 0 ? void 0 : defaultParent()) {\n            /**\n             * A unique ID generated for every projection node.\n             */\n            this.id = id++;\n            /**\n             * An id that represents a unique session instigated by startUpdate.\n             */\n            this.animationId = 0;\n            /**\n             * A Set containing all this component's children. This is used to iterate\n             * through the children.\n             *\n             * TODO: This could be faster to iterate as a flat array stored on the root node.\n             */\n            this.children = new Set();\n            /**\n             * Options for the node. We use this to configure what kind of layout animations\n             * we should perform (if any).\n             */\n            this.options = {};\n            /**\n             * We use this to detect when its safe to shut down part of a projection tree.\n             * We have to keep projecting children for scale correction and relative projection\n             * until all their parents stop performing layout animations.\n             */\n            this.isTreeAnimating = false;\n            this.isAnimationBlocked = false;\n            /**\n             * Flag to true if we think this layout has been changed. We can't always know this,\n             * currently we set it to true every time a component renders, or if it has a layoutDependency\n             * if that has changed between renders. Additionally, components can be grouped by LayoutGroup\n             * and if one node is dirtied, they all are.\n             */\n            this.isLayoutDirty = false;\n            /**\n             * Flag to true if we think the projection calculations for this node needs\n             * recalculating as a result of an updated transform or layout animation.\n             */\n            this.isProjectionDirty = false;\n            /**\n             * Flag to true if the layout *or* transform has changed. This then gets propagated\n             * throughout the projection tree, forcing any element below to recalculate on the next frame.\n             */\n            this.isSharedProjectionDirty = false;\n            /**\n             * Flag transform dirty. This gets propagated throughout the whole tree but is only\n             * respected by shared nodes.\n             */\n            this.isTransformDirty = false;\n            /**\n             * Block layout updates for instant layout transitions throughout the tree.\n             */\n            this.updateManuallyBlocked = false;\n            this.updateBlockedByResize = false;\n            /**\n             * Set to true between the start of the first `willUpdate` call and the end of the `didUpdate`\n             * call.\n             */\n            this.isUpdating = false;\n            /**\n             * If this is an SVG element we currently disable projection transforms\n             */\n            this.isSVG = false;\n            /**\n             * Flag to true (during promotion) if a node doing an instant layout transition needs to reset\n             * its projection styles.\n             */\n            this.needsReset = false;\n            /**\n             * Flags whether this node should have its transform reset prior to measuring.\n             */\n            this.shouldResetTransform = false;\n            /**\n             * An object representing the calculated contextual/accumulated/tree scale.\n             * This will be used to scale calculcated projection transforms, as these are\n             * calculated in screen-space but need to be scaled for elements to layoutly\n             * make it to their calculated destinations.\n             *\n             * TODO: Lazy-init\n             */\n            this.treeScale = { x: 1, y: 1 };\n            /**\n             *\n             */\n            this.eventHandlers = new Map();\n            this.hasTreeAnimated = false;\n            // Note: Currently only running on root node\n            this.updateScheduled = false;\n            this.checkUpdateFailed = () => {\n                if (this.isUpdating) {\n                    this.isUpdating = false;\n                    this.clearAllSnapshots();\n                }\n            };\n            /**\n             * This is a multi-step process as shared nodes might be of different depths. Nodes\n             * are sorted by depth order, so we need to resolve the entire tree before moving to\n             * the next step.\n             */\n            this.updateProjection = () => {\n                /**\n                 * Reset debug counts. Manually resetting rather than creating a new\n                 * object each frame.\n                 */\n                projectionFrameData.totalNodes =\n                    projectionFrameData.resolvedTargetDeltas =\n                        projectionFrameData.recalculatedProjection =\n                            0;\n                this.nodes.forEach(propagateDirtyNodes);\n                this.nodes.forEach(resolveTargetDelta);\n                this.nodes.forEach(calcProjection);\n                this.nodes.forEach(cleanDirtyNodes);\n                record(projectionFrameData);\n            };\n            this.hasProjected = false;\n            this.isVisible = true;\n            this.animationProgress = 0;\n            /**\n             * Shared layout\n             */\n            // TODO Only running on root node\n            this.sharedNodes = new Map();\n            this.latestValues = latestValues;\n            this.root = parent ? parent.root || parent : this;\n            this.path = parent ? [...parent.path, parent] : [];\n            this.parent = parent;\n            this.depth = parent ? parent.depth + 1 : 0;\n            for (let i = 0; i < this.path.length; i++) {\n                this.path[i].shouldResetTransform = true;\n            }\n            if (this.root === this)\n                this.nodes = new FlatTree();\n        }\n        addEventListener(name, handler) {\n            if (!this.eventHandlers.has(name)) {\n                this.eventHandlers.set(name, new SubscriptionManager());\n            }\n            return this.eventHandlers.get(name).add(handler);\n        }\n        notifyListeners(name, ...args) {\n            const subscriptionManager = this.eventHandlers.get(name);\n            subscriptionManager && subscriptionManager.notify(...args);\n        }\n        hasListeners(name) {\n            return this.eventHandlers.has(name);\n        }\n        /**\n         * Lifecycles\n         */\n        mount(instance, isLayoutDirty = this.root.hasTreeAnimated) {\n            if (this.instance)\n                return;\n            this.isSVG = isSVGElement(instance);\n            this.instance = instance;\n            const { layoutId, layout, visualElement } = this.options;\n            if (visualElement && !visualElement.current) {\n                visualElement.mount(instance);\n            }\n            this.root.nodes.add(this);\n            this.parent && this.parent.children.add(this);\n            if (isLayoutDirty && (layout || layoutId)) {\n                this.isLayoutDirty = true;\n            }\n            if (attachResizeListener) {\n                let cancelDelay;\n                const resizeUnblockUpdate = () => (this.root.updateBlockedByResize = false);\n                attachResizeListener(instance, () => {\n                    this.root.updateBlockedByResize = true;\n                    cancelDelay && cancelDelay();\n                    cancelDelay = delay(resizeUnblockUpdate, 250);\n                    if (globalProjectionState.hasAnimatedSinceResize) {\n                        globalProjectionState.hasAnimatedSinceResize = false;\n                        this.nodes.forEach(finishAnimation);\n                    }\n                });\n            }\n            if (layoutId) {\n                this.root.registerSharedNode(layoutId, this);\n            }\n            // Only register the handler if it requires layout animation\n            if (this.options.animate !== false &&\n                visualElement &&\n                (layoutId || layout)) {\n                this.addEventListener(\"didUpdate\", ({ delta, hasLayoutChanged, hasRelativeTargetChanged, layout: newLayout, }) => {\n                    if (this.isTreeAnimationBlocked()) {\n                        this.target = undefined;\n                        this.relativeTarget = undefined;\n                        return;\n                    }\n                    // TODO: Check here if an animation exists\n                    const layoutTransition = this.options.transition ||\n                        visualElement.getDefaultTransition() ||\n                        defaultLayoutTransition;\n                    const { onLayoutAnimationStart, onLayoutAnimationComplete, } = visualElement.getProps();\n                    /**\n                     * The target layout of the element might stay the same,\n                     * but its position relative to its parent has changed.\n                     */\n                    const targetChanged = !this.targetLayout ||\n                        !boxEqualsRounded(this.targetLayout, newLayout) ||\n                        hasRelativeTargetChanged;\n                    /**\n                     * If the layout hasn't seemed to have changed, it might be that the\n                     * element is visually in the same place in the document but its position\n                     * relative to its parent has indeed changed. So here we check for that.\n                     */\n                    const hasOnlyRelativeTargetChanged = !hasLayoutChanged && hasRelativeTargetChanged;\n                    if (this.options.layoutRoot ||\n                        (this.resumeFrom && this.resumeFrom.instance) ||\n                        hasOnlyRelativeTargetChanged ||\n                        (hasLayoutChanged &&\n                            (targetChanged || !this.currentAnimation))) {\n                        if (this.resumeFrom) {\n                            this.resumingFrom = this.resumeFrom;\n                            this.resumingFrom.resumingFrom = undefined;\n                        }\n                        this.setAnimationOrigin(delta, hasOnlyRelativeTargetChanged);\n                        const animationOptions = {\n                            ...getValueTransition(layoutTransition, \"layout\"),\n                            onPlay: onLayoutAnimationStart,\n                            onComplete: onLayoutAnimationComplete,\n                        };\n                        if (visualElement.shouldReduceMotion ||\n                            this.options.layoutRoot) {\n                            animationOptions.delay = 0;\n                            animationOptions.type = false;\n                        }\n                        this.startAnimation(animationOptions);\n                    }\n                    else {\n                        /**\n                         * If the layout hasn't changed and we have an animation that hasn't started yet,\n                         * finish it immediately. Otherwise it will be animating from a location\n                         * that was probably never commited to screen and look like a jumpy box.\n                         */\n                        if (!hasLayoutChanged) {\n                            finishAnimation(this);\n                        }\n                        if (this.isLead() && this.options.onExitComplete) {\n                            this.options.onExitComplete();\n                        }\n                    }\n                    this.targetLayout = newLayout;\n                });\n            }\n        }\n        unmount() {\n            this.options.layoutId && this.willUpdate();\n            this.root.nodes.remove(this);\n            const stack = this.getStack();\n            stack && stack.remove(this);\n            this.parent && this.parent.children.delete(this);\n            this.instance = undefined;\n            cancelFrame(this.updateProjection);\n        }\n        // only on the root\n        blockUpdate() {\n            this.updateManuallyBlocked = true;\n        }\n        unblockUpdate() {\n            this.updateManuallyBlocked = false;\n        }\n        isUpdateBlocked() {\n            return this.updateManuallyBlocked || this.updateBlockedByResize;\n        }\n        isTreeAnimationBlocked() {\n            return (this.isAnimationBlocked ||\n                (this.parent && this.parent.isTreeAnimationBlocked()) ||\n                false);\n        }\n        // Note: currently only running on root node\n        startUpdate() {\n            if (this.isUpdateBlocked())\n                return;\n            this.isUpdating = true;\n            this.nodes && this.nodes.forEach(resetRotation);\n            this.animationId++;\n        }\n        getTransformTemplate() {\n            const { visualElement } = this.options;\n            return visualElement && visualElement.getProps().transformTemplate;\n        }\n        willUpdate(shouldNotifyListeners = true) {\n            this.root.hasTreeAnimated = true;\n            if (this.root.isUpdateBlocked()) {\n                this.options.onExitComplete && this.options.onExitComplete();\n                return;\n            }\n            !this.root.isUpdating && this.root.startUpdate();\n            if (this.isLayoutDirty)\n                return;\n            this.isLayoutDirty = true;\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                node.shouldResetTransform = true;\n                node.updateScroll(\"snapshot\");\n                if (node.options.layoutRoot) {\n                    node.willUpdate(false);\n                }\n            }\n            const { layoutId, layout } = this.options;\n            if (layoutId === undefined && !layout)\n                return;\n            const transformTemplate = this.getTransformTemplate();\n            this.prevTransformTemplateValue = transformTemplate\n                ? transformTemplate(this.latestValues, \"\")\n                : undefined;\n            this.updateSnapshot();\n            shouldNotifyListeners && this.notifyListeners(\"willUpdate\");\n        }\n        update() {\n            this.updateScheduled = false;\n            const updateWasBlocked = this.isUpdateBlocked();\n            // When doing an instant transition, we skip the layout update,\n            // but should still clean up the measurements so that the next\n            // snapshot could be taken correctly.\n            if (updateWasBlocked) {\n                this.unblockUpdate();\n                this.clearAllSnapshots();\n                this.nodes.forEach(clearMeasurements);\n                return;\n            }\n            if (!this.isUpdating) {\n                this.nodes.forEach(clearIsLayoutDirty);\n            }\n            this.isUpdating = false;\n            /**\n             * Write\n             */\n            this.nodes.forEach(resetTransformStyle);\n            /**\n             * Read ==================\n             */\n            // Update layout measurements of updated children\n            this.nodes.forEach(updateLayout);\n            /**\n             * Write\n             */\n            // Notify listeners that the layout is updated\n            this.nodes.forEach(notifyLayoutUpdate);\n            this.clearAllSnapshots();\n            /**\n             * Manually flush any pending updates. Ideally\n             * we could leave this to the following requestAnimationFrame but this seems\n             * to leave a flash of incorrectly styled content.\n             */\n            const now = performance.now();\n            frameData.delta = clamp(0, 1000 / 60, now - frameData.timestamp);\n            frameData.timestamp = now;\n            frameData.isProcessing = true;\n            steps.update.process(frameData);\n            steps.preRender.process(frameData);\n            steps.render.process(frameData);\n            frameData.isProcessing = false;\n        }\n        didUpdate() {\n            if (!this.updateScheduled) {\n                this.updateScheduled = true;\n                queueMicrotask(() => this.update());\n            }\n        }\n        clearAllSnapshots() {\n            this.nodes.forEach(clearSnapshot);\n            this.sharedNodes.forEach(removeLeadSnapshots);\n        }\n        scheduleUpdateProjection() {\n            frame.preRender(this.updateProjection, false, true);\n        }\n        scheduleCheckAfterUnmount() {\n            /**\n             * If the unmounting node is in a layoutGroup and did trigger a willUpdate,\n             * we manually call didUpdate to give a chance to the siblings to animate.\n             * Otherwise, cleanup all snapshots to prevents future nodes from reusing them.\n             */\n            frame.postRender(() => {\n                if (this.isLayoutDirty) {\n                    this.root.didUpdate();\n                }\n                else {\n                    this.root.checkUpdateFailed();\n                }\n            });\n        }\n        /**\n         * Update measurements\n         */\n        updateSnapshot() {\n            if (this.snapshot || !this.instance)\n                return;\n            this.snapshot = this.measure();\n        }\n        updateLayout() {\n            if (!this.instance)\n                return;\n            // TODO: Incorporate into a forwarded scroll offset\n            this.updateScroll();\n            if (!(this.options.alwaysMeasureLayout && this.isLead()) &&\n                !this.isLayoutDirty) {\n                return;\n            }\n            /**\n             * When a node is mounted, it simply resumes from the prevLead's\n             * snapshot instead of taking a new one, but the ancestors scroll\n             * might have updated while the prevLead is unmounted. We need to\n             * update the scroll again to make sure the layout we measure is\n             * up to date.\n             */\n            if (this.resumeFrom && !this.resumeFrom.instance) {\n                for (let i = 0; i < this.path.length; i++) {\n                    const node = this.path[i];\n                    node.updateScroll();\n                }\n            }\n            const prevLayout = this.layout;\n            this.layout = this.measure(false);\n            this.layoutCorrected = createBox();\n            this.isLayoutDirty = false;\n            this.projectionDelta = undefined;\n            this.notifyListeners(\"measure\", this.layout.layoutBox);\n            const { visualElement } = this.options;\n            visualElement &&\n                visualElement.notify(\"LayoutMeasure\", this.layout.layoutBox, prevLayout ? prevLayout.layoutBox : undefined);\n        }\n        updateScroll(phase = \"measure\") {\n            let needsMeasurement = Boolean(this.options.layoutScroll && this.instance);\n            if (this.scroll &&\n                this.scroll.animationId === this.root.animationId &&\n                this.scroll.phase === phase) {\n                needsMeasurement = false;\n            }\n            if (needsMeasurement) {\n                this.scroll = {\n                    animationId: this.root.animationId,\n                    phase,\n                    isRoot: checkIsScrollRoot(this.instance),\n                    offset: measureScroll(this.instance),\n                };\n            }\n        }\n        resetTransform() {\n            if (!resetTransform)\n                return;\n            const isResetRequested = this.isLayoutDirty || this.shouldResetTransform;\n            const hasProjection = this.projectionDelta && !isDeltaZero(this.projectionDelta);\n            const transformTemplate = this.getTransformTemplate();\n            const transformTemplateValue = transformTemplate\n                ? transformTemplate(this.latestValues, \"\")\n                : undefined;\n            const transformTemplateHasChanged = transformTemplateValue !== this.prevTransformTemplateValue;\n            if (isResetRequested &&\n                (hasProjection ||\n                    hasTransform(this.latestValues) ||\n                    transformTemplateHasChanged)) {\n                resetTransform(this.instance, transformTemplateValue);\n                this.shouldResetTransform = false;\n                this.scheduleRender();\n            }\n        }\n        measure(removeTransform = true) {\n            const pageBox = this.measurePageBox();\n            let layoutBox = this.removeElementScroll(pageBox);\n            /**\n             * Measurements taken during the pre-render stage\n             * still have transforms applied so we remove them\n             * via calculation.\n             */\n            if (removeTransform) {\n                layoutBox = this.removeTransform(layoutBox);\n            }\n            roundBox(layoutBox);\n            return {\n                animationId: this.root.animationId,\n                measuredBox: pageBox,\n                layoutBox,\n                latestValues: {},\n                source: this.id,\n            };\n        }\n        measurePageBox() {\n            const { visualElement } = this.options;\n            if (!visualElement)\n                return createBox();\n            const box = visualElement.measureViewportBox();\n            // Remove viewport scroll to give page-relative coordinates\n            const { scroll } = this.root;\n            if (scroll) {\n                translateAxis(box.x, scroll.offset.x);\n                translateAxis(box.y, scroll.offset.y);\n            }\n            return box;\n        }\n        removeElementScroll(box) {\n            const boxWithoutScroll = createBox();\n            copyBoxInto(boxWithoutScroll, box);\n            /**\n             * Performance TODO: Keep a cumulative scroll offset down the tree\n             * rather than loop back up the path.\n             */\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                const { scroll, options } = node;\n                if (node !== this.root && scroll && options.layoutScroll) {\n                    /**\n                     * If this is a new scroll root, we want to remove all previous scrolls\n                     * from the viewport box.\n                     */\n                    if (scroll.isRoot) {\n                        copyBoxInto(boxWithoutScroll, box);\n                        const { scroll: rootScroll } = this.root;\n                        /**\n                         * Undo the application of page scroll that was originally added\n                         * to the measured bounding box.\n                         */\n                        if (rootScroll) {\n                            translateAxis(boxWithoutScroll.x, -rootScroll.offset.x);\n                            translateAxis(boxWithoutScroll.y, -rootScroll.offset.y);\n                        }\n                    }\n                    translateAxis(boxWithoutScroll.x, scroll.offset.x);\n                    translateAxis(boxWithoutScroll.y, scroll.offset.y);\n                }\n            }\n            return boxWithoutScroll;\n        }\n        applyTransform(box, transformOnly = false) {\n            const withTransforms = createBox();\n            copyBoxInto(withTransforms, box);\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                if (!transformOnly &&\n                    node.options.layoutScroll &&\n                    node.scroll &&\n                    node !== node.root) {\n                    transformBox(withTransforms, {\n                        x: -node.scroll.offset.x,\n                        y: -node.scroll.offset.y,\n                    });\n                }\n                if (!hasTransform(node.latestValues))\n                    continue;\n                transformBox(withTransforms, node.latestValues);\n            }\n            if (hasTransform(this.latestValues)) {\n                transformBox(withTransforms, this.latestValues);\n            }\n            return withTransforms;\n        }\n        removeTransform(box) {\n            const boxWithoutTransform = createBox();\n            copyBoxInto(boxWithoutTransform, box);\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                if (!node.instance)\n                    continue;\n                if (!hasTransform(node.latestValues))\n                    continue;\n                hasScale(node.latestValues) && node.updateSnapshot();\n                const sourceBox = createBox();\n                const nodeBox = node.measurePageBox();\n                copyBoxInto(sourceBox, nodeBox);\n                removeBoxTransforms(boxWithoutTransform, node.latestValues, node.snapshot ? node.snapshot.layoutBox : undefined, sourceBox);\n            }\n            if (hasTransform(this.latestValues)) {\n                removeBoxTransforms(boxWithoutTransform, this.latestValues);\n            }\n            return boxWithoutTransform;\n        }\n        setTargetDelta(delta) {\n            this.targetDelta = delta;\n            this.root.scheduleUpdateProjection();\n            this.isProjectionDirty = true;\n        }\n        setOptions(options) {\n            this.options = {\n                ...this.options,\n                ...options,\n                crossfade: options.crossfade !== undefined ? options.crossfade : true,\n            };\n        }\n        clearMeasurements() {\n            this.scroll = undefined;\n            this.layout = undefined;\n            this.snapshot = undefined;\n            this.prevTransformTemplateValue = undefined;\n            this.targetDelta = undefined;\n            this.target = undefined;\n            this.isLayoutDirty = false;\n        }\n        forceRelativeParentToResolveTarget() {\n            if (!this.relativeParent)\n                return;\n            /**\n             * If the parent target isn't up-to-date, force it to update.\n             * This is an unfortunate de-optimisation as it means any updating relative\n             * projection will cause all the relative parents to recalculate back\n             * up the tree.\n             */\n            if (this.relativeParent.resolvedRelativeTargetAt !==\n                frameData.timestamp) {\n                this.relativeParent.resolveTargetDelta(true);\n            }\n        }\n        resolveTargetDelta(forceRecalculation = false) {\n            var _a;\n            /**\n             * Once the dirty status of nodes has been spread through the tree, we also\n             * need to check if we have a shared node of a different depth that has itself\n             * been dirtied.\n             */\n            const lead = this.getLead();\n            this.isProjectionDirty || (this.isProjectionDirty = lead.isProjectionDirty);\n            this.isTransformDirty || (this.isTransformDirty = lead.isTransformDirty);\n            this.isSharedProjectionDirty || (this.isSharedProjectionDirty = lead.isSharedProjectionDirty);\n            const isShared = Boolean(this.resumingFrom) || this !== lead;\n            /**\n             * We don't use transform for this step of processing so we don't\n             * need to check whether any nodes have changed transform.\n             */\n            const canSkip = !(forceRecalculation ||\n                (isShared && this.isSharedProjectionDirty) ||\n                this.isProjectionDirty ||\n                ((_a = this.parent) === null || _a === void 0 ? void 0 : _a.isProjectionDirty) ||\n                this.attemptToResolveRelativeTarget);\n            if (canSkip)\n                return;\n            const { layout, layoutId } = this.options;\n            /**\n             * If we have no layout, we can't perform projection, so early return\n             */\n            if (!this.layout || !(layout || layoutId))\n                return;\n            this.resolvedRelativeTargetAt = frameData.timestamp;\n            /**\n             * If we don't have a targetDelta but do have a layout, we can attempt to resolve\n             * a relativeParent. This will allow a component to perform scale correction\n             * even if no animation has started.\n             */\n            // TODO If this is unsuccessful this currently happens every frame\n            if (!this.targetDelta && !this.relativeTarget) {\n                // TODO: This is a semi-repetition of further down this function, make DRY\n                const relativeParent = this.getClosestProjectingParent();\n                if (relativeParent &&\n                    relativeParent.layout &&\n                    this.animationProgress !== 1) {\n                    this.relativeParent = relativeParent;\n                    this.forceRelativeParentToResolveTarget();\n                    this.relativeTarget = createBox();\n                    this.relativeTargetOrigin = createBox();\n                    calcRelativePosition(this.relativeTargetOrigin, this.layout.layoutBox, relativeParent.layout.layoutBox);\n                    copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);\n                }\n                else {\n                    this.relativeParent = this.relativeTarget = undefined;\n                }\n            }\n            /**\n             * If we have no relative target or no target delta our target isn't valid\n             * for this frame.\n             */\n            if (!this.relativeTarget && !this.targetDelta)\n                return;\n            /**\n             * Lazy-init target data structure\n             */\n            if (!this.target) {\n                this.target = createBox();\n                this.targetWithTransforms = createBox();\n            }\n            /**\n             * If we've got a relative box for this component, resolve it into a target relative to the parent.\n             */\n            if (this.relativeTarget &&\n                this.relativeTargetOrigin &&\n                this.relativeParent &&\n                this.relativeParent.target) {\n                this.forceRelativeParentToResolveTarget();\n                calcRelativeBox(this.target, this.relativeTarget, this.relativeParent.target);\n                /**\n                 * If we've only got a targetDelta, resolve it into a target\n                 */\n            }\n            else if (this.targetDelta) {\n                if (Boolean(this.resumingFrom)) {\n                    // TODO: This is creating a new object every frame\n                    this.target = this.applyTransform(this.layout.layoutBox);\n                }\n                else {\n                    copyBoxInto(this.target, this.layout.layoutBox);\n                }\n                applyBoxDelta(this.target, this.targetDelta);\n            }\n            else {\n                /**\n                 * If no target, use own layout as target\n                 */\n                copyBoxInto(this.target, this.layout.layoutBox);\n            }\n            /**\n             * If we've been told to attempt to resolve a relative target, do so.\n             */\n            if (this.attemptToResolveRelativeTarget) {\n                this.attemptToResolveRelativeTarget = false;\n                const relativeParent = this.getClosestProjectingParent();\n                if (relativeParent &&\n                    Boolean(relativeParent.resumingFrom) ===\n                        Boolean(this.resumingFrom) &&\n                    !relativeParent.options.layoutScroll &&\n                    relativeParent.target &&\n                    this.animationProgress !== 1) {\n                    this.relativeParent = relativeParent;\n                    this.forceRelativeParentToResolveTarget();\n                    this.relativeTarget = createBox();\n                    this.relativeTargetOrigin = createBox();\n                    calcRelativePosition(this.relativeTargetOrigin, this.target, relativeParent.target);\n                    copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);\n                }\n                else {\n                    this.relativeParent = this.relativeTarget = undefined;\n                }\n            }\n            /**\n             * Increase debug counter for resolved target deltas\n             */\n            projectionFrameData.resolvedTargetDeltas++;\n        }\n        getClosestProjectingParent() {\n            if (!this.parent ||\n                hasScale(this.parent.latestValues) ||\n                has2DTranslate(this.parent.latestValues)) {\n                return undefined;\n            }\n            if (this.parent.isProjecting()) {\n                return this.parent;\n            }\n            else {\n                return this.parent.getClosestProjectingParent();\n            }\n        }\n        isProjecting() {\n            return Boolean((this.relativeTarget ||\n                this.targetDelta ||\n                this.options.layoutRoot) &&\n                this.layout);\n        }\n        calcProjection() {\n            var _a;\n            const lead = this.getLead();\n            const isShared = Boolean(this.resumingFrom) || this !== lead;\n            let canSkip = true;\n            /**\n             * If this is a normal layout animation and neither this node nor its nearest projecting\n             * is dirty then we can't skip.\n             */\n            if (this.isProjectionDirty || ((_a = this.parent) === null || _a === void 0 ? void 0 : _a.isProjectionDirty)) {\n                canSkip = false;\n            }\n            /**\n             * If this is a shared layout animation and this node's shared projection is dirty then\n             * we can't skip.\n             */\n            if (isShared &&\n                (this.isSharedProjectionDirty || this.isTransformDirty)) {\n                canSkip = false;\n            }\n            /**\n             * If we have resolved the target this frame we must recalculate the\n             * projection to ensure it visually represents the internal calculations.\n             */\n            if (this.resolvedRelativeTargetAt === frameData.timestamp) {\n                canSkip = false;\n            }\n            if (canSkip)\n                return;\n            const { layout, layoutId } = this.options;\n            /**\n             * If this section of the tree isn't animating we can\n             * delete our target sources for the following frame.\n             */\n            this.isTreeAnimating = Boolean((this.parent && this.parent.isTreeAnimating) ||\n                this.currentAnimation ||\n                this.pendingAnimation);\n            if (!this.isTreeAnimating) {\n                this.targetDelta = this.relativeTarget = undefined;\n            }\n            if (!this.layout || !(layout || layoutId))\n                return;\n            /**\n             * Reset the corrected box with the latest values from box, as we're then going\n             * to perform mutative operations on it.\n             */\n            copyBoxInto(this.layoutCorrected, this.layout.layoutBox);\n            /**\n             * Record previous tree scales before updating.\n             */\n            const prevTreeScaleX = this.treeScale.x;\n            const prevTreeScaleY = this.treeScale.y;\n            /**\n             * Apply all the parent deltas to this box to produce the corrected box. This\n             * is the layout box, as it will appear on screen as a result of the transforms of its parents.\n             */\n            applyTreeDeltas(this.layoutCorrected, this.treeScale, this.path, isShared);\n            /**\n             * If this layer needs to perform scale correction but doesn't have a target,\n             * use the layout as the target.\n             */\n            if (lead.layout &&\n                !lead.target &&\n                (this.treeScale.x !== 1 || this.treeScale.y !== 1)) {\n                lead.target = lead.layout.layoutBox;\n            }\n            const { target } = lead;\n            if (!target) {\n                /**\n                 * If we don't have a target to project into, but we were previously\n                 * projecting, we want to remove the stored transform and schedule\n                 * a render to ensure the elements reflect the removed transform.\n                 */\n                if (this.projectionTransform) {\n                    this.projectionDelta = createDelta();\n                    this.projectionTransform = \"none\";\n                    this.scheduleRender();\n                }\n                return;\n            }\n            if (!this.projectionDelta) {\n                this.projectionDelta = createDelta();\n                this.projectionDeltaWithTransform = createDelta();\n            }\n            const prevProjectionTransform = this.projectionTransform;\n            /**\n             * Update the delta between the corrected box and the target box before user-set transforms were applied.\n             * This will allow us to calculate the corrected borderRadius and boxShadow to compensate\n             * for our layout reprojection, but still allow them to be scaled correctly by the user.\n             * It might be that to simplify this we may want to accept that user-set scale is also corrected\n             * and we wouldn't have to keep and calc both deltas, OR we could support a user setting\n             * to allow people to choose whether these styles are corrected based on just the\n             * layout reprojection or the final bounding box.\n             */\n            calcBoxDelta(this.projectionDelta, this.layoutCorrected, target, this.latestValues);\n            this.projectionTransform = buildProjectionTransform(this.projectionDelta, this.treeScale);\n            if (this.projectionTransform !== prevProjectionTransform ||\n                this.treeScale.x !== prevTreeScaleX ||\n                this.treeScale.y !== prevTreeScaleY) {\n                this.hasProjected = true;\n                this.scheduleRender();\n                this.notifyListeners(\"projectionUpdate\", target);\n            }\n            /**\n             * Increase debug counter for recalculated projections\n             */\n            projectionFrameData.recalculatedProjection++;\n        }\n        hide() {\n            this.isVisible = false;\n            // TODO: Schedule render\n        }\n        show() {\n            this.isVisible = true;\n            // TODO: Schedule render\n        }\n        scheduleRender(notifyAll = true) {\n            this.options.scheduleRender && this.options.scheduleRender();\n            if (notifyAll) {\n                const stack = this.getStack();\n                stack && stack.scheduleRender();\n            }\n            if (this.resumingFrom && !this.resumingFrom.instance) {\n                this.resumingFrom = undefined;\n            }\n        }\n        setAnimationOrigin(delta, hasOnlyRelativeTargetChanged = false) {\n            const snapshot = this.snapshot;\n            const snapshotLatestValues = snapshot\n                ? snapshot.latestValues\n                : {};\n            const mixedValues = { ...this.latestValues };\n            const targetDelta = createDelta();\n            if (!this.relativeParent ||\n                !this.relativeParent.options.layoutRoot) {\n                this.relativeTarget = this.relativeTargetOrigin = undefined;\n            }\n            this.attemptToResolveRelativeTarget = !hasOnlyRelativeTargetChanged;\n            const relativeLayout = createBox();\n            const snapshotSource = snapshot ? snapshot.source : undefined;\n            const layoutSource = this.layout ? this.layout.source : undefined;\n            const isSharedLayoutAnimation = snapshotSource !== layoutSource;\n            const stack = this.getStack();\n            const isOnlyMember = !stack || stack.members.length <= 1;\n            const shouldCrossfadeOpacity = Boolean(isSharedLayoutAnimation &&\n                !isOnlyMember &&\n                this.options.crossfade === true &&\n                !this.path.some(hasOpacityCrossfade));\n            this.animationProgress = 0;\n            let prevRelativeTarget;\n            this.mixTargetDelta = (latest) => {\n                const progress = latest / 1000;\n                mixAxisDelta(targetDelta.x, delta.x, progress);\n                mixAxisDelta(targetDelta.y, delta.y, progress);\n                this.setTargetDelta(targetDelta);\n                if (this.relativeTarget &&\n                    this.relativeTargetOrigin &&\n                    this.layout &&\n                    this.relativeParent &&\n                    this.relativeParent.layout) {\n                    calcRelativePosition(relativeLayout, this.layout.layoutBox, this.relativeParent.layout.layoutBox);\n                    mixBox(this.relativeTarget, this.relativeTargetOrigin, relativeLayout, progress);\n                    /**\n                     * If this is an unchanged relative target we can consider the\n                     * projection not dirty.\n                     */\n                    if (prevRelativeTarget &&\n                        boxEquals(this.relativeTarget, prevRelativeTarget)) {\n                        this.isProjectionDirty = false;\n                    }\n                    if (!prevRelativeTarget)\n                        prevRelativeTarget = createBox();\n                    copyBoxInto(prevRelativeTarget, this.relativeTarget);\n                }\n                if (isSharedLayoutAnimation) {\n                    this.animationValues = mixedValues;\n                    mixValues(mixedValues, snapshotLatestValues, this.latestValues, progress, shouldCrossfadeOpacity, isOnlyMember);\n                }\n                this.root.scheduleUpdateProjection();\n                this.scheduleRender();\n                this.animationProgress = progress;\n            };\n            this.mixTargetDelta(this.options.layoutRoot ? 1000 : 0);\n        }\n        startAnimation(options) {\n            this.notifyListeners(\"animationStart\");\n            this.currentAnimation && this.currentAnimation.stop();\n            if (this.resumingFrom && this.resumingFrom.currentAnimation) {\n                this.resumingFrom.currentAnimation.stop();\n            }\n            if (this.pendingAnimation) {\n                cancelFrame(this.pendingAnimation);\n                this.pendingAnimation = undefined;\n            }\n            /**\n             * Start the animation in the next frame to have a frame with progress 0,\n             * where the target is the same as when the animation started, so we can\n             * calculate the relative positions correctly for instant transitions.\n             */\n            this.pendingAnimation = frame.update(() => {\n                globalProjectionState.hasAnimatedSinceResize = true;\n                this.currentAnimation = animateSingleValue(0, animationTarget, {\n                    ...options,\n                    onUpdate: (latest) => {\n                        this.mixTargetDelta(latest);\n                        options.onUpdate && options.onUpdate(latest);\n                    },\n                    onComplete: () => {\n                        options.onComplete && options.onComplete();\n                        this.completeAnimation();\n                    },\n                });\n                if (this.resumingFrom) {\n                    this.resumingFrom.currentAnimation = this.currentAnimation;\n                }\n                this.pendingAnimation = undefined;\n            });\n        }\n        completeAnimation() {\n            if (this.resumingFrom) {\n                this.resumingFrom.currentAnimation = undefined;\n                this.resumingFrom.preserveOpacity = undefined;\n            }\n            const stack = this.getStack();\n            stack && stack.exitAnimationComplete();\n            this.resumingFrom =\n                this.currentAnimation =\n                    this.animationValues =\n                        undefined;\n            this.notifyListeners(\"animationComplete\");\n        }\n        finishAnimation() {\n            if (this.currentAnimation) {\n                this.mixTargetDelta && this.mixTargetDelta(animationTarget);\n                this.currentAnimation.stop();\n            }\n            this.completeAnimation();\n        }\n        applyTransformsToTarget() {\n            const lead = this.getLead();\n            let { targetWithTransforms, target, layout, latestValues } = lead;\n            if (!targetWithTransforms || !target || !layout)\n                return;\n            /**\n             * If we're only animating position, and this element isn't the lead element,\n             * then instead of projecting into the lead box we instead want to calculate\n             * a new target that aligns the two boxes but maintains the layout shape.\n             */\n            if (this !== lead &&\n                this.layout &&\n                layout &&\n                shouldAnimatePositionOnly(this.options.animationType, this.layout.layoutBox, layout.layoutBox)) {\n                target = this.target || createBox();\n                const xLength = calcLength(this.layout.layoutBox.x);\n                target.x.min = lead.target.x.min;\n                target.x.max = target.x.min + xLength;\n                const yLength = calcLength(this.layout.layoutBox.y);\n                target.y.min = lead.target.y.min;\n                target.y.max = target.y.min + yLength;\n            }\n            copyBoxInto(targetWithTransforms, target);\n            /**\n             * Apply the latest user-set transforms to the targetBox to produce the targetBoxFinal.\n             * This is the final box that we will then project into by calculating a transform delta and\n             * applying it to the corrected box.\n             */\n            transformBox(targetWithTransforms, latestValues);\n            /**\n             * Update the delta between the corrected box and the final target box, after\n             * user-set transforms are applied to it. This will be used by the renderer to\n             * create a transform style that will reproject the element from its layout layout\n             * into the desired bounding box.\n             */\n            calcBoxDelta(this.projectionDeltaWithTransform, this.layoutCorrected, targetWithTransforms, latestValues);\n        }\n        registerSharedNode(layoutId, node) {\n            if (!this.sharedNodes.has(layoutId)) {\n                this.sharedNodes.set(layoutId, new NodeStack());\n            }\n            const stack = this.sharedNodes.get(layoutId);\n            stack.add(node);\n            const config = node.options.initialPromotionConfig;\n            node.promote({\n                transition: config ? config.transition : undefined,\n                preserveFollowOpacity: config && config.shouldPreserveFollowOpacity\n                    ? config.shouldPreserveFollowOpacity(node)\n                    : undefined,\n            });\n        }\n        isLead() {\n            const stack = this.getStack();\n            return stack ? stack.lead === this : true;\n        }\n        getLead() {\n            var _a;\n            const { layoutId } = this.options;\n            return layoutId ? ((_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.lead) || this : this;\n        }\n        getPrevLead() {\n            var _a;\n            const { layoutId } = this.options;\n            return layoutId ? (_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.prevLead : undefined;\n        }\n        getStack() {\n            const { layoutId } = this.options;\n            if (layoutId)\n                return this.root.sharedNodes.get(layoutId);\n        }\n        promote({ needsReset, transition, preserveFollowOpacity, } = {}) {\n            const stack = this.getStack();\n            if (stack)\n                stack.promote(this, preserveFollowOpacity);\n            if (needsReset) {\n                this.projectionDelta = undefined;\n                this.needsReset = true;\n            }\n            if (transition)\n                this.setOptions({ transition });\n        }\n        relegate() {\n            const stack = this.getStack();\n            if (stack) {\n                return stack.relegate(this);\n            }\n            else {\n                return false;\n            }\n        }\n        resetRotation() {\n            const { visualElement } = this.options;\n            if (!visualElement)\n                return;\n            // If there's no detected rotation values, we can early return without a forced render.\n            let hasRotate = false;\n            /**\n             * An unrolled check for rotation values. Most elements don't have any rotation and\n             * skipping the nested loop and new object creation is 50% faster.\n             */\n            const { latestValues } = visualElement;\n            if (latestValues.rotate ||\n                latestValues.rotateX ||\n                latestValues.rotateY ||\n                latestValues.rotateZ) {\n                hasRotate = true;\n            }\n            // If there's no rotation values, we don't need to do any more.\n            if (!hasRotate)\n                return;\n            const resetValues = {};\n            // Check the rotate value of all axes and reset to 0\n            for (let i = 0; i < transformAxes.length; i++) {\n                const key = \"rotate\" + transformAxes[i];\n                // Record the rotation and then temporarily set it to 0\n                if (latestValues[key]) {\n                    resetValues[key] = latestValues[key];\n                    visualElement.setStaticValue(key, 0);\n                }\n            }\n            // Force a render of this element to apply the transform with all rotations\n            // set to 0.\n            visualElement.render();\n            // Put back all the values we reset\n            for (const key in resetValues) {\n                visualElement.setStaticValue(key, resetValues[key]);\n            }\n            // Schedule a render for the next frame. This ensures we won't visually\n            // see the element with the reset rotate value applied.\n            visualElement.scheduleRender();\n        }\n        getProjectionStyles(styleProp = {}) {\n            var _a, _b;\n            // TODO: Return lifecycle-persistent object\n            const styles = {};\n            if (!this.instance || this.isSVG)\n                return styles;\n            if (!this.isVisible) {\n                return { visibility: \"hidden\" };\n            }\n            else {\n                styles.visibility = \"\";\n            }\n            const transformTemplate = this.getTransformTemplate();\n            if (this.needsReset) {\n                this.needsReset = false;\n                styles.opacity = \"\";\n                styles.pointerEvents =\n                    resolveMotionValue(styleProp.pointerEvents) || \"\";\n                styles.transform = transformTemplate\n                    ? transformTemplate(this.latestValues, \"\")\n                    : \"none\";\n                return styles;\n            }\n            const lead = this.getLead();\n            if (!this.projectionDelta || !this.layout || !lead.target) {\n                const emptyStyles = {};\n                if (this.options.layoutId) {\n                    emptyStyles.opacity =\n                        this.latestValues.opacity !== undefined\n                            ? this.latestValues.opacity\n                            : 1;\n                    emptyStyles.pointerEvents =\n                        resolveMotionValue(styleProp.pointerEvents) || \"\";\n                }\n                if (this.hasProjected && !hasTransform(this.latestValues)) {\n                    emptyStyles.transform = transformTemplate\n                        ? transformTemplate({}, \"\")\n                        : \"none\";\n                    this.hasProjected = false;\n                }\n                return emptyStyles;\n            }\n            const valuesToRender = lead.animationValues || lead.latestValues;\n            this.applyTransformsToTarget();\n            styles.transform = buildProjectionTransform(this.projectionDeltaWithTransform, this.treeScale, valuesToRender);\n            if (transformTemplate) {\n                styles.transform = transformTemplate(valuesToRender, styles.transform);\n            }\n            const { x, y } = this.projectionDelta;\n            styles.transformOrigin = `${x.origin * 100}% ${y.origin * 100}% 0`;\n            if (lead.animationValues) {\n                /**\n                 * If the lead component is animating, assign this either the entering/leaving\n                 * opacity\n                 */\n                styles.opacity =\n                    lead === this\n                        ? (_b = (_a = valuesToRender.opacity) !== null && _a !== void 0 ? _a : this.latestValues.opacity) !== null && _b !== void 0 ? _b : 1\n                        : this.preserveOpacity\n                            ? this.latestValues.opacity\n                            : valuesToRender.opacityExit;\n            }\n            else {\n                /**\n                 * Or we're not animating at all, set the lead component to its layout\n                 * opacity and other components to hidden.\n                 */\n                styles.opacity =\n                    lead === this\n                        ? valuesToRender.opacity !== undefined\n                            ? valuesToRender.opacity\n                            : \"\"\n                        : valuesToRender.opacityExit !== undefined\n                            ? valuesToRender.opacityExit\n                            : 0;\n            }\n            /**\n             * Apply scale correction\n             */\n            for (const key in scaleCorrectors) {\n                if (valuesToRender[key] === undefined)\n                    continue;\n                const { correct, applyTo } = scaleCorrectors[key];\n                /**\n                 * Only apply scale correction to the value if we have an\n                 * active projection transform. Otherwise these values become\n                 * vulnerable to distortion if the element changes size without\n                 * a corresponding layout animation.\n                 */\n                const corrected = styles.transform === \"none\"\n                    ? valuesToRender[key]\n                    : correct(valuesToRender[key], lead);\n                if (applyTo) {\n                    const num = applyTo.length;\n                    for (let i = 0; i < num; i++) {\n                        styles[applyTo[i]] = corrected;\n                    }\n                }\n                else {\n                    styles[key] = corrected;\n                }\n            }\n            /**\n             * Disable pointer events on follow components. This is to ensure\n             * that if a follow component covers a lead component it doesn't block\n             * pointer events on the lead.\n             */\n            if (this.options.layoutId) {\n                styles.pointerEvents =\n                    lead === this\n                        ? resolveMotionValue(styleProp.pointerEvents) || \"\"\n                        : \"none\";\n            }\n            return styles;\n        }\n        clearSnapshot() {\n            this.resumeFrom = this.snapshot = undefined;\n        }\n        // Only run on root\n        resetTree() {\n            this.root.nodes.forEach((node) => { var _a; return (_a = node.currentAnimation) === null || _a === void 0 ? void 0 : _a.stop(); });\n            this.root.nodes.forEach(clearMeasurements);\n            this.root.sharedNodes.clear();\n        }\n    };\n}\nfunction updateLayout(node) {\n    node.updateLayout();\n}\nfunction notifyLayoutUpdate(node) {\n    var _a;\n    const snapshot = ((_a = node.resumeFrom) === null || _a === void 0 ? void 0 : _a.snapshot) || node.snapshot;\n    if (node.isLead() &&\n        node.layout &&\n        snapshot &&\n        node.hasListeners(\"didUpdate\")) {\n        const { layoutBox: layout, measuredBox: measuredLayout } = node.layout;\n        const { animationType } = node.options;\n        const isShared = snapshot.source !== node.layout.source;\n        // TODO Maybe we want to also resize the layout snapshot so we don't trigger\n        // animations for instance if layout=\"size\" and an element has only changed position\n        if (animationType === \"size\") {\n            eachAxis((axis) => {\n                const axisSnapshot = isShared\n                    ? snapshot.measuredBox[axis]\n                    : snapshot.layoutBox[axis];\n                const length = calcLength(axisSnapshot);\n                axisSnapshot.min = layout[axis].min;\n                axisSnapshot.max = axisSnapshot.min + length;\n            });\n        }\n        else if (shouldAnimatePositionOnly(animationType, snapshot.layoutBox, layout)) {\n            eachAxis((axis) => {\n                const axisSnapshot = isShared\n                    ? snapshot.measuredBox[axis]\n                    : snapshot.layoutBox[axis];\n                const length = calcLength(layout[axis]);\n                axisSnapshot.max = axisSnapshot.min + length;\n                /**\n                 * Ensure relative target gets resized and rerendererd\n                 */\n                if (node.relativeTarget && !node.currentAnimation) {\n                    node.isProjectionDirty = true;\n                    node.relativeTarget[axis].max =\n                        node.relativeTarget[axis].min + length;\n                }\n            });\n        }\n        const layoutDelta = createDelta();\n        calcBoxDelta(layoutDelta, layout, snapshot.layoutBox);\n        const visualDelta = createDelta();\n        if (isShared) {\n            calcBoxDelta(visualDelta, node.applyTransform(measuredLayout, true), snapshot.measuredBox);\n        }\n        else {\n            calcBoxDelta(visualDelta, layout, snapshot.layoutBox);\n        }\n        const hasLayoutChanged = !isDeltaZero(layoutDelta);\n        let hasRelativeTargetChanged = false;\n        if (!node.resumeFrom) {\n            const relativeParent = node.getClosestProjectingParent();\n            /**\n             * If the relativeParent is itself resuming from a different element then\n             * the relative snapshot is not relavent\n             */\n            if (relativeParent && !relativeParent.resumeFrom) {\n                const { snapshot: parentSnapshot, layout: parentLayout } = relativeParent;\n                if (parentSnapshot && parentLayout) {\n                    const relativeSnapshot = createBox();\n                    calcRelativePosition(relativeSnapshot, snapshot.layoutBox, parentSnapshot.layoutBox);\n                    const relativeLayout = createBox();\n                    calcRelativePosition(relativeLayout, layout, parentLayout.layoutBox);\n                    if (!boxEqualsRounded(relativeSnapshot, relativeLayout)) {\n                        hasRelativeTargetChanged = true;\n                    }\n                    if (relativeParent.options.layoutRoot) {\n                        node.relativeTarget = relativeLayout;\n                        node.relativeTargetOrigin = relativeSnapshot;\n                        node.relativeParent = relativeParent;\n                    }\n                }\n            }\n        }\n        node.notifyListeners(\"didUpdate\", {\n            layout,\n            snapshot,\n            delta: visualDelta,\n            layoutDelta,\n            hasLayoutChanged,\n            hasRelativeTargetChanged,\n        });\n    }\n    else if (node.isLead()) {\n        const { onExitComplete } = node.options;\n        onExitComplete && onExitComplete();\n    }\n    /**\n     * Clearing transition\n     * TODO: Investigate why this transition is being passed in as {type: false } from Framer\n     * and why we need it at all\n     */\n    node.options.transition = undefined;\n}\nfunction propagateDirtyNodes(node) {\n    /**\n     * Increase debug counter for nodes encountered this frame\n     */\n    projectionFrameData.totalNodes++;\n    if (!node.parent)\n        return;\n    /**\n     * If this node isn't projecting, propagate isProjectionDirty. It will have\n     * no performance impact but it will allow the next child that *is* projecting\n     * but *isn't* dirty to just check its parent to see if *any* ancestor needs\n     * correcting.\n     */\n    if (!node.isProjecting()) {\n        node.isProjectionDirty = node.parent.isProjectionDirty;\n    }\n    /**\n     * Propagate isSharedProjectionDirty and isTransformDirty\n     * throughout the whole tree. A future revision can take another look at\n     * this but for safety we still recalcualte shared nodes.\n     */\n    node.isSharedProjectionDirty || (node.isSharedProjectionDirty = Boolean(node.isProjectionDirty ||\n        node.parent.isProjectionDirty ||\n        node.parent.isSharedProjectionDirty));\n    node.isTransformDirty || (node.isTransformDirty = node.parent.isTransformDirty);\n}\nfunction cleanDirtyNodes(node) {\n    node.isProjectionDirty =\n        node.isSharedProjectionDirty =\n            node.isTransformDirty =\n                false;\n}\nfunction clearSnapshot(node) {\n    node.clearSnapshot();\n}\nfunction clearMeasurements(node) {\n    node.clearMeasurements();\n}\nfunction clearIsLayoutDirty(node) {\n    node.isLayoutDirty = false;\n}\nfunction resetTransformStyle(node) {\n    const { visualElement } = node.options;\n    if (visualElement && visualElement.getProps().onBeforeLayoutMeasure) {\n        visualElement.notify(\"BeforeLayoutMeasure\");\n    }\n    node.resetTransform();\n}\nfunction finishAnimation(node) {\n    node.finishAnimation();\n    node.targetDelta = node.relativeTarget = node.target = undefined;\n    node.isProjectionDirty = true;\n}\nfunction resolveTargetDelta(node) {\n    node.resolveTargetDelta();\n}\nfunction calcProjection(node) {\n    node.calcProjection();\n}\nfunction resetRotation(node) {\n    node.resetRotation();\n}\nfunction removeLeadSnapshots(stack) {\n    stack.removeLeadSnapshot();\n}\nfunction mixAxisDelta(output, delta, p) {\n    output.translate = mix(delta.translate, 0, p);\n    output.scale = mix(delta.scale, 1, p);\n    output.origin = delta.origin;\n    output.originPoint = delta.originPoint;\n}\nfunction mixAxis(output, from, to, p) {\n    output.min = mix(from.min, to.min, p);\n    output.max = mix(from.max, to.max, p);\n}\nfunction mixBox(output, from, to, p) {\n    mixAxis(output.x, from.x, to.x, p);\n    mixAxis(output.y, from.y, to.y, p);\n}\nfunction hasOpacityCrossfade(node) {\n    return (node.animationValues && node.animationValues.opacityExit !== undefined);\n}\nconst defaultLayoutTransition = {\n    duration: 0.45,\n    ease: [0.4, 0, 0.1, 1],\n};\nconst userAgentContains = (string) => typeof navigator !== \"undefined\" &&\n    navigator.userAgent.toLowerCase().includes(string);\n/**\n * Measured bounding boxes must be rounded in Safari and\n * left untouched in Chrome, otherwise non-integer layouts within scaled-up elements\n * can appear to jump.\n */\nconst roundPoint = userAgentContains(\"applewebkit/\") && !userAgentContains(\"chrome/\")\n    ? Math.round\n    : noop;\nfunction roundAxis(axis) {\n    // Round to the nearest .5 pixels to support subpixel layouts\n    axis.min = roundPoint(axis.min);\n    axis.max = roundPoint(axis.max);\n}\nfunction roundBox(box) {\n    roundAxis(box.x);\n    roundAxis(box.y);\n}\nfunction shouldAnimatePositionOnly(animationType, snapshot, layout) {\n    return (animationType === \"position\" ||\n        (animationType === \"preserve-aspect\" &&\n            !isNear(aspectRatio(snapshot), aspectRatio(layout), 0.2)));\n}\n\nexport { cleanDirtyNodes, createProjectionNode, mixAxis, mixAxisDelta, mixBox, propagateDirtyNodes };\n","function record(data) {\n    if (window.MotionDebug) {\n        window.MotionDebug.record(data);\n    }\n}\n\nexport { record };\n","function isSVGElement(element) {\n    return element instanceof SVGElement && element.tagName !== \"svg\";\n}\n\nexport { isSVGElement };\n","import { frame, cancelFrame } from '../frameloop/frame.mjs';\n\n/**\n * Timeout defined in ms\n */\nfunction delay(callback, timeout) {\n    const start = performance.now();\n    const checkElapsed = ({ timestamp }) => {\n        const elapsed = timestamp - start;\n        if (elapsed >= timeout) {\n            cancelFrame(checkElapsed);\n            callback(elapsed - timeout);\n        }\n    };\n    frame.read(checkElapsed, true);\n    return () => cancelFrame(checkElapsed);\n}\n\nexport { delay };\n","import { animateMotionValue } from './motion-value.mjs';\nimport { motionValue } from '../../value/index.mjs';\nimport { isMotionValue } from '../../value/utils/is-motion-value.mjs';\n\nfunction animateSingleValue(value, keyframes, options) {\n    const motionValue$1 = isMotionValue(value) ? value : motionValue(value);\n    motionValue$1.start(animateMotionValue(\"\", motionValue$1, keyframes, options));\n    return motionValue$1.animation;\n}\n\nexport { animateSingleValue };\n","import { createProjectionNode } from './create-projection-node.mjs';\nimport { addDomEvent } from '../../events/add-dom-event.mjs';\n\nconst DocumentProjectionNode = createProjectionNode({\n    attachResizeListener: (ref, notify) => addDomEvent(ref, \"resize\", notify),\n    measureScroll: () => ({\n        x: document.documentElement.scrollLeft || document.body.scrollLeft,\n        y: document.documentElement.scrollTop || document.body.scrollTop,\n    }),\n    checkIsScrollRoot: () => true,\n});\n\nexport { DocumentProjectionNode };\n","import { createProjectionNode } from './create-projection-node.mjs';\nimport { DocumentProjectionNode } from './DocumentProjectionNode.mjs';\n\nconst rootProjectionNode = {\n    current: undefined,\n};\nconst HTMLProjectionNode = createProjectionNode({\n    measureScroll: (instance) => ({\n        x: instance.scrollLeft,\n        y: instance.scrollTop,\n    }),\n    defaultParent: () => {\n        if (!rootProjectionNode.current) {\n            const documentNode = new DocumentProjectionNode({});\n            documentNode.mount(window);\n            documentNode.setOptions({ layoutScroll: true });\n            rootProjectionNode.current = documentNode;\n        }\n        return rootProjectionNode.current;\n    },\n    resetTransform: (instance, value) => {\n        instance.style.transform = value !== undefined ? value : \"none\";\n    },\n    checkIsScrollRoot: (instance) => Boolean(window.getComputedStyle(instance).position === \"fixed\"),\n});\n\nexport { HTMLProjectionNode, rootProjectionNode };\n","import { DragGesture } from '../../gestures/drag/index.mjs';\nimport { PanGesture } from '../../gestures/pan/index.mjs';\nimport { MeasureLayout } from './layout/MeasureLayout.mjs';\nimport { HTMLProjectionNode } from '../../projection/node/HTMLProjectionNode.mjs';\n\nconst drag = {\n    pan: {\n        Feature: PanGesture,\n    },\n    drag: {\n        Feature: DragGesture,\n        ProjectionNode: HTMLProjectionNode,\n        MeasureLayout,\n    },\n};\n\nexport { drag };\n","import { HTMLProjectionNode } from '../../projection/node/HTMLProjectionNode.mjs';\nimport { MeasureLayout } from './layout/MeasureLayout.mjs';\n\nconst layout = {\n    layout: {\n        ProjectionNode: HTMLProjectionNode,\n        MeasureLayout,\n    },\n};\n\nexport { layout };\n","import { drag } from '../../motion/features/drag.mjs';\nimport { layout } from '../../motion/features/layout.mjs';\nimport { domAnimation } from './features-animation.mjs';\n\n/**\n * @public\n */\nconst domMax = {\n    ...domAnimation,\n    ...drag,\n    ...layout,\n};\n\nexport { domMax };\n"],"names":["distance","a","b","Math","abs","PanSession","constructor","event","handlers","transformPagePoint","arguments","length","undefined","this","startEvent","lastMoveEvent","lastMoveEventInfo","updatePoint","info","getPanInfo","history","isPanStarted","isDistancePastThreshold","xDelta","x","yDelta","y","sqrt","distance2D","offset","point","timestamp","frameData","push","onStart","onMove","handlePointerMove","transformPoint","frame","update","handlePointerUp","end","onEnd","onSessionEnd","panInfo","type","isPrimaryPointer","initialInfo","extractEventInfo","onSessionStart","removeListeners","pipe","addPointerEvent","window","updateHandlers","cancelFrame","subtractPoint","_ref","delta","lastDevicePoint","startDevicePoint","velocity","getVelocity","timeDelta","i","timestampedPoint","lastPoint","secondsToMilliseconds","time","millisecondsToSeconds","currentVelocity","Infinity","calcLength","axis","max","min","isNear","value","target","maxDistance","calcAxisDelta","source","origin","originPoint","mix","scale","isNaN","translate","calcBoxDelta","originX","originY","calcRelativeAxis","relative","parent","calcRelativeAxisPosition","layout","calcRelativePosition","calcRelativeAxisConstraints","calcViewportAxisConstraints","layoutAxis","constraintsAxis","defaultElastic","resolveAxisElastic","dragElastic","minLabel","maxLabel","resolvePointElastic","label","eachAxis","callback","elementDragControls","WeakMap","VisualElementDragControls","visualElement","openGlobalLock","isDragging","currentDirection","constraints","hasMutatedConstraints","elastic","createBox","start","originEvent","snapToCursor","presenceContext","isPresent","panSession","stopAnimation","drag","dragPropagation","onDragStart","getProps","getGlobalLock","resolveConstraints","projection","isAnimationBlocked","current","getAxisMotionValue","get","percent","test","measuredAxis","layoutBox","parseFloat","animationState","setActive","dragDirectionLock","onDirectionLock","onDrag","lockThreshold","direction","getCurrentDirection","updateAxis","render","stop","getTransformPagePoint","cancel","startAnimation","onDragEnd","_point","shouldDrag","axisValue","next","applyConstraints","set","dragConstraints","prevConstraints","isRefObject","resolveRefConstraints","_ref2","top","left","bottom","right","calcRelativeConstraints","resolveDragElastic","relativeConstraints","rebaseAxisConstraints","onMeasureDragConstraints","constraintsElement","invariant","constraintsBox","measurePageBox","root","measuredConstraints","calcViewportConstraints","userConstraints","convertBoxToBoundingBox","convertBoundingBoxToBox","dragMomentum","dragTransition","dragSnapToOrigin","onDragTransitionEnd","momentumAnimations","transition","bounceStiffness","bounceDamping","inertia","timeConstant","restDelta","restSpeed","startAxisValueAnimation","Promise","all","then","animateMotionValue","dragKey","toUpperCase","props","externalMotionValue","getValue","initial","scalePositionWithinConstraints","boxProgress","latest","sourceLength","targetLength","progress","clamp","calcOrigin","transformTemplate","style","transform","updateScroll","updateLayout","addListeners","element","stopPointerListener","dragListener","measureDragConstraints","stopMeasureLayoutListener","addEventListener","stopResizeListener","addDomEvent","stopLayoutUpdateListener","hasLayoutChanged","motionValue","DragGesture","Feature","node","super","removeGroupControls","noop","controls","mount","dragControls","subscribe","unmount","asyncHandler","handler","PanGesture","removePointerDownListener","onPointerDown","pointerDownEvent","session","createPanHandlers","onPanSessionStart","onPanStart","onPan","onPanEnd","globalProjectionState","hasAnimatedSinceResize","hasEverUpdated","pixelsToPercent","pixels","correctBorderRadius","correct","px","concat","correctBoxShadow","treeScale","projectionDelta","original","shadow","complex","parse","template","createTransformer","xScale","yScale","averageScale","MeasureLayoutWithContext","React__default","componentDidMount","layoutGroup","switchLayoutGroup","layoutId","addScaleCorrector","defaultScaleCorrectors","group","add","register","didUpdate","safeToRemove","setOptions","options","onExitComplete","getSnapshotBeforeUpdate","prevProps","layoutDependency","willUpdate","promote","relegate","postRender","stack","getStack","members","componentDidUpdate","queueMicrotask","currentAnimation","isLead","componentWillUnmount","promoteContext","scheduleCheckAfterUnmount","remove","deregister","MeasureLayout","context","useContext","PresenceContext","id","useId","useEffect","usePresence","LayoutGroupContext","SwitchLayoutGroupContext","borderRadius","applyTo","borderTopLeftRadius","borderTopRightRadius","borderBottomLeftRadius","borderBottomRightRadius","boxShadow","borders","numBorders","asNumber","isPx","getRadius","values","radiusName","easeCrossfadeIn","compress","circOut","easeCrossfadeOut","easing","p","copyAxisInto","originAxis","copyBoxInto","box","originBox","removePointDelta","boxScale","scalePoint","removeAxisTransforms","transforms","sourceAxis","key","scaleKey","originKey","removeAxisDelta","xKeys","yKeys","removeBoxTransforms","sourceBox","isAxisDeltaZero","isDeltaZero","boxEqualsRounded","round","aspectRatio","NodeStack","addUniqueItem","scheduleRender","removeItem","prevLead","lead","indexOfNode","findIndex","member","preserveFollowOpacity","show","instance","resumeFrom","preserveOpacity","snapshot","latestValues","animationValues","isUpdating","isLayoutDirty","crossfade","hide","exitAnimationComplete","forEach","resumingFrom","removeLeadSnapshot","buildProjectionTransform","latestTransform","xTranslate","yTranslate","rotate","rotateX","rotateY","elementScaleX","elementScaleY","compareByDepth","depth","FlatTree","children","isDirty","child","sort","transformAxes","projectionFrameData","totalNodes","resolvedTargetDeltas","recalculatedProjection","createProjectionNode","attachResizeListener","defaultParent","measureScroll","checkIsScrollRoot","resetTransform","animationId","Set","isTreeAnimating","isProjectionDirty","isSharedProjectionDirty","isTransformDirty","updateManuallyBlocked","updateBlockedByResize","isSVG","needsReset","shouldResetTransform","eventHandlers","Map","hasTreeAnimated","updateScheduled","checkUpdateFailed","clearAllSnapshots","updateProjection","data","nodes","propagateDirtyNodes","resolveTargetDelta","calcProjection","cleanDirtyNodes","MotionDebug","record","hasProjected","isVisible","animationProgress","sharedNodes","path","name","has","SubscriptionManager","notifyListeners","subscriptionManager","_len","args","Array","_key","notify","hasListeners","SVGElement","tagName","cancelDelay","resizeUnblockUpdate","timeout","performance","now","checkElapsed","elapsed","read","delay","finishAnimation","registerSharedNode","animate","hasRelativeTargetChanged","newLayout","isTreeAnimationBlocked","relativeTarget","layoutTransition","getDefaultTransition","defaultLayoutTransition","onLayoutAnimationStart","onLayoutAnimationComplete","targetChanged","targetLayout","hasOnlyRelativeTargetChanged","layoutRoot","setAnimationOrigin","animationOptions","getValueTransition","onPlay","onComplete","shouldReduceMotion","delete","blockUpdate","unblockUpdate","isUpdateBlocked","startUpdate","resetRotation","getTransformTemplate","shouldNotifyListeners","prevTransformTemplateValue","updateSnapshot","clearMeasurements","clearIsLayoutDirty","resetTransformStyle","notifyLayoutUpdate","isProcessing","steps","process","preRender","clearSnapshot","removeLeadSnapshots","scheduleUpdateProjection","measure","alwaysMeasureLayout","prevLayout","layoutCorrected","phase","needsMeasurement","Boolean","layoutScroll","scroll","isRoot","isResetRequested","hasProjection","transformTemplateValue","transformTemplateHasChanged","hasTransform","removeTransform","pageBox","removeElementScroll","roundAxis","measuredBox","measureViewportBox","translateAxis","boxWithoutScroll","rootScroll","applyTransform","transformOnly","withTransforms","transformBox","boxWithoutTransform","hasScale","setTargetDelta","targetDelta","forceRelativeParentToResolveTarget","relativeParent","resolvedRelativeTargetAt","forceRecalculation","_a","getLead","isShared","attemptToResolveRelativeTarget","getClosestProjectingParent","relativeTargetOrigin","targetWithTransforms","applyBoxDelta","has2DTranslate","isProjecting","canSkip","pendingAnimation","prevTreeScaleX","prevTreeScaleY","applyTreeDeltas","projectionTransform","createDelta","projectionDeltaWithTransform","prevProjectionTransform","notifyAll","snapshotLatestValues","mixedValues","relativeLayout","isSharedLayoutAnimation","isOnlyMember","shouldCrossfadeOpacity","some","hasOpacityCrossfade","prevRelativeTarget","mixTargetDelta","output","from","to","mixAxisDelta","mixAxis","follow","opacity","opacityExit","borderLabel","followRadius","leadRadius","mixValues","keyframes","motionValue$1","isMotionValue","animation","animateSingleValue","onUpdate","completeAnimation","applyTransformsToTarget","shouldAnimatePositionOnly","animationType","xLength","yLength","config","initialPromotionConfig","shouldPreserveFollowOpacity","getPrevLead","hasRotate","rotateZ","resetValues","setStaticValue","getProjectionStyles","styleProp","_b","styles","visibility","pointerEvents","resolveMotionValue","emptyStyles","valuesToRender","transformOrigin","scaleCorrectors","corrected","num","resetTree","clear","measuredLayout","axisSnapshot","layoutDelta","visualDelta","parentSnapshot","parentLayout","relativeSnapshot","onBeforeLayoutMeasure","duration","ease","userAgentContains","string","navigator","userAgent","toLowerCase","includes","roundPoint","DocumentProjectionNode","ref","document","documentElement","scrollLeft","body","scrollTop","rootProjectionNode","HTMLProjectionNode","documentNode","getComputedStyle","position","pan","ProjectionNode","domMax","domAnimation"],"sourceRoot":""}